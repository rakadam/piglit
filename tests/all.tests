# -*- coding: utf-8 -*-
# All tests that come with piglit, using default settings

import os
import os.path as path

from framework.core import *
from framework.exectest import *
from framework.gleantest import *
from framework.glsl_parser_test import GLSLParserTest, add_glsl_parser_test, import_glsl_parser_tests

# Blacklisted tests are removed from the test profile.
blacklist = [
	]

# Path to tests dir, correct even when not running from the top directory.
testsDir = path.dirname(__file__)

# Find the generated_tests directory, by looking either in
# $PIGLIT_BUILD_DIR (if that environment variable exists) or in the
# parent directory of the directory containing this file.
generatedTestDir = os.path.join(
	os.environ.get(
		'PIGLIT_BUILD_DIR',
		os.path.join(testsDir, '..')),
	'generated_tests')

# Quick wrapper for PlainExecTest for our usual concurrent args.
def plain_test(name):
	return PlainExecTest([name, '-auto'])

def add_plain_test(group, name):
	group[name] = PlainExecTest([name, '-auto'])

def concurrent_test(args):
	test = PlainExecTest(args + " -auto -fbo")
	test.runConcurrent = True
	return test

def add_concurrent_test(group, args):
	group[args] = concurrent_test(args)

######
# Collecting all tests
profile = TestProfile()

try:
	execfile(path.join(testsDir, 'gtf.tests'))
except SystemExit:
	pass

def add_fbo_depthstencil_tests(group, format):
	if format == 'default_fb':
		prefix = ''
	else:
		prefix = 'fbo-'
	group[prefix + 'depthstencil-' + format + '-clear'] = PlainExecTest(['fbo-depthstencil', '-auto', 'clear', format])
	group[prefix + 'depthstencil-' + format + '-readpixels-FLOAT-and-USHORT'] = PlainExecTest(['fbo-depthstencil', '-auto', 'readpixels', format, 'FLOAT-and-USHORT'])
	group[prefix + 'depthstencil-' + format + '-readpixels-24_8'] = PlainExecTest(['fbo-depthstencil', '-auto', 'readpixels', format, '24_8'])
	group[prefix + 'depthstencil-' + format + '-readpixels-32F_24_8_REV'] = PlainExecTest(['fbo-depthstencil', '-auto', 'readpixels', format, '32F_24_8_REV'])
	group[prefix + 'depthstencil-' + format + '-drawpixels-FLOAT-and-USHORT'] = PlainExecTest(['fbo-depthstencil', '-auto', 'drawpixels', format, 'FLOAT-and-USHORT'])
	group[prefix + 'depthstencil-' + format + '-drawpixels-24_8'] = PlainExecTest(['fbo-depthstencil', '-auto', 'drawpixels', format, '24_8'])
	group[prefix + 'depthstencil-' + format + '-drawpixels-32F_24_8_REV'] = PlainExecTest(['fbo-depthstencil', '-auto', 'drawpixels', format, '32F_24_8_REV'])
	group[prefix + 'depthstencil-' + format + '-copypixels'] = PlainExecTest(['fbo-depthstencil', '-auto', 'copypixels', format])
	group[prefix + 'depthstencil-' + format + '-blit'] = PlainExecTest(['fbo-depthstencil', '-auto', 'blit', format])

glean = Group()
glean['basic'] = GleanTest('basic', res_dir)
glean['api2'] = GleanTest('api2', res_dir)
glean['makeCurrent'] = GleanTest('makeCurrent', res_dir)
glean['blendFunc'] = GleanTest('blendFunc', res_dir)
glean['bufferObject'] = GleanTest('bufferObject', res_dir)
glean['clipFlat'] = GleanTest('clipFlat', res_dir)
glean['depthStencil'] = GleanTest('depthStencil', res_dir)
glean['fbo'] = GleanTest('fbo', res_dir)
glean['fpexceptions'] = GleanTest('fpexceptions', res_dir)
glean['getString'] = GleanTest('getString', res_dir)
glean['logicOp'] = GleanTest('logicOp', res_dir)
glean['maskedClear'] = GleanTest('maskedClear', res_dir)
glean['occluquery'] = GleanTest('occluQry', res_dir)
glean['orthoPosRandTris'] = GleanTest('orthoPosRandTris', res_dir)
glean['orthoPosRandRects'] = GleanTest('orthoPosRandRects', res_dir)
glean['orthoPosTinyQuads'] = GleanTest('orthoPosTinyQuads', res_dir)
glean['orthoPosHLines'] = GleanTest('orthoPosHLines', res_dir)
glean['orthoPosVLines'] = GleanTest('orthoPosVLines', res_dir)
glean['orthoPosPoints'] = GleanTest('orthoPosPoints', res_dir)
glean['paths'] = GleanTest('paths', res_dir)
glean['pbo'] = GleanTest('pbo', res_dir)
glean['polygonOffset'] = GleanTest('polygonOffset', res_dir)
glean['pixelFormats'] = GleanTest('pixelFormats', res_dir)
glean['pointAtten'] = GleanTest('pointAtten', res_dir)
glean['pointSprite'] = GleanTest('pointSprite', res_dir)
glean['exactRGBA'] = GleanTest('exactRGBA', res_dir)
glean['readPixSanity'] = GleanTest('readPixSanity', res_dir)
glean['rgbTriStrip'] = GleanTest('rgbTriStrip', res_dir)
glean['scissor'] = GleanTest('scissor', res_dir)
glean['shaderAPI'] = GleanTest('shaderAPI', res_dir)
glean['stencil2'] = GleanTest('stencil2', res_dir)
glean['teapot'] = GleanTest('teapot', res_dir)
glean['texCombine'] = GleanTest('texCombine', res_dir)
glean['texCube'] = GleanTest('texCube', res_dir)
glean['texEnv'] = GleanTest('texEnv', res_dir)
glean['texgen'] = GleanTest('texgen', res_dir)
glean['texRect'] = GleanTest('texRect', res_dir)
glean['texCombine4'] = GleanTest('texCombine4', res_dir)
glean['texSwizzle'] = GleanTest('texSwizzle', res_dir)
glean['texture_srgb'] = GleanTest('texture_srgb', res_dir)
glean['texUnits'] = GleanTest('texUnits', res_dir)
glean['vertArrayBGRA'] = GleanTest('vertArrayBGRA', res_dir)
glean['vertattrib'] = GleanTest('vertattrib', res_dir)

def add_glsl1(name):
	testname = 'glsl1-' + name
	glean[testname] = GleanTest('glsl1', res_dir)
	glean[testname].env['PIGLIT_TEST'] = name
execfile(testsDir + '/glean-glsl1.tests')

def add_fp1(name):
	testname = 'fp1-' + name
	glean[testname] = GleanTest('fragProg1', res_dir)
	glean[testname].env['PIGLIT_TEST'] = name
execfile(testsDir + '/glean-fragProg1.tests')

def add_vp1(name):
	testname = 'vp1-' + name
	glean[testname] = GleanTest('vertProg1', res_dir)
	glean[testname].env['PIGLIT_TEST'] = name
execfile(testsDir + '/glean-vertProg1.tests')

def add_fbo_generatemipmap_extension(group, extension, name):
	group[name] = PlainExecTest(['fbo-generatemipmap-formats', '-auto',
				     extension])

def add_fbo_clear_extension(group, extension, name):
	group[name] = PlainExecTest(['fbo-clear-formats', '-auto', extension])

def add_fbo_blending_extension(group, extension, name):
	group[name] = PlainExecTest(['fbo-blending-formats', '-auto', extension])

def add_fbo_alphatest_extension(group, extension, name):
	group[name] = PlainExecTest(['fbo-alphatest-formats', '-auto', extension])

mesa = Group()
add_plain_test(mesa, 'crossbar')

def add_fbo_rg(group, format):
	name = "fbo-rg-" + format
	group[name] = PlainExecTest(['fbo-rg', '-auto', format])

execfile(testsDir + '/opencl.tests')

fbo = Group()
add_plain_test(fbo, 'fbo-1d')
add_plain_test(fbo, 'fbo-3d')
add_plain_test(fbo, 'fbo-alpha')
add_plain_test(fbo, 'fbo-alphatest-formats')
add_plain_test(fbo, 'fbo-alphatest-nocolor')
add_plain_test(fbo, 'fbo-alphatest-nocolor-ff')
add_plain_test(fbo, 'fbo-array')
add_plain_test(fbo, 'fbo-luminance-alpha')
add_plain_test(fbo, 'fbo-blending-formats')
add_plain_test(fbo, 'fbo-bind-renderbuffer')
add_plain_test(fbo, 'fbo-blit')
add_plain_test(fbo, 'fbo-blit-d24s8')
add_plain_test(fbo, 'fbo-cubemap')
add_plain_test(fbo, 'fbo-clearmipmap')
add_plain_test(fbo, 'fbo-clear-formats')
add_plain_test(fbo, 'fbo-copypix')
add_plain_test(fbo, 'fbo-copyteximage')
add_plain_test(fbo, 'fbo-copyteximage-simple')
add_plain_test(fbo, 'fbo-depth-array')
add_plain_test(fbo, 'fbo-depthtex')
add_plain_test(fbo, 'fbo-depth-sample-compare')
add_plain_test(fbo, 'fbo-drawbuffers')
add_plain_test(fbo, 'fbo-drawbuffers-arbfp')
add_plain_test(fbo, 'fbo-drawbuffers-blend-add')
add_plain_test(fbo, 'fbo-drawbuffers-fragcolor')
add_plain_test(fbo, 'fbo-drawbuffers-maxtargets')
add_plain_test(fbo, 'fbo-drawbuffers2-blend')
add_plain_test(fbo, 'fbo-drawbuffers2-colormask')
add_plain_test(fbo, 'fbo-draw-buffers-blend')
add_plain_test(fbo, 'fbo-finish-deleted')
add_plain_test(fbo, 'fbo-flushing')
add_plain_test(fbo, 'fbo-flushing-2')
add_plain_test(fbo, 'fbo-fragcoord')
add_plain_test(fbo, 'fbo-fragcoord2')
add_plain_test(fbo, 'fbo-generatemipmap')
add_plain_test(fbo, 'fbo-generatemipmap-filtering')
add_plain_test(fbo, 'fbo-generatemipmap-formats')
add_plain_test(fbo, 'fbo-generatemipmap-scissor')
add_plain_test(fbo, 'fbo-generatemipmap-nonsquare')
add_plain_test(fbo, 'fbo-generatemipmap-npot')
add_plain_test(fbo, 'fbo-generatemipmap-viewport')
add_plain_test(fbo, 'fbo-getframebufferattachmentparameter-01')
add_plain_test(fbo, 'fbo-gl_pointcoord')
add_plain_test(fbo, 'fbo-incomplete-texture-01')
add_plain_test(fbo, 'fbo-incomplete-texture-02')
add_plain_test(fbo, 'fbo-incomplete-texture-03')
add_plain_test(fbo, 'fbo-incomplete-texture-04')
add_plain_test(fbo, 'fbo-integer')
add_plain_test(fbo, 'fbo-maxsize')
add_concurrent_test(fbo, 'fbo-mipmap-copypix')
add_plain_test(fbo, 'fbo-nodepth-test')
add_plain_test(fbo, 'fbo-nostencil-test')
add_plain_test(fbo, 'fbo-pbo-readpixels-small')
add_plain_test(fbo, 'fbo-readdrawpix')
add_plain_test(fbo, 'fbo-readpixels')
add_plain_test(fbo, 'fbo-readpixels-depth-formats')
add_plain_test(fbo, 'fbo-scissor-bitmap')
add_plain_test(fbo, 'fbo-srgb')
add_plain_test(fbo, 'fbo-srgb-blit')
add_plain_test(fbo, 'fbo-storage-formats')
add_plain_test(fbo, 'fbo-storage-completeness')
add_plain_test(fbo, 'fbo-sys-blit')
add_plain_test(fbo, 'fbo-sys-sub-blit')
add_fbo_rg(fbo, 'GL_RED')
add_fbo_rg(fbo, 'GL_R8')
add_fbo_rg(fbo, 'GL_R16')
add_fbo_rg(fbo, 'GL_RG')
add_fbo_rg(fbo, 'GL_RG8')
add_fbo_rg(fbo, 'GL_RG16')
fbo['FBO blit to missing attachment'] = PlainExecTest(['fbo-missing-attachment-blit', '-auto', 'to'])
fbo['FBO blit from missing attachment'] = PlainExecTest(['fbo-missing-attachment-blit', '-auto', 'from'])

general = Group()
add_plain_test(general, 'array-stride')
add_plain_test(general, 'bgra-sec-color-pointer')
add_plain_test(general, 'bgra-vert-attrib-pointer')
add_plain_test(general, 'blendminmax')
add_plain_test(general, 'blendsquare')
add_plain_test(general, 'clear-varray-2.0')
add_plain_test(general, 'copypixels-draw-sync')
add_plain_test(general, 'copypixels-sync')
add_plain_test(general, 'depthrange-clear')
add_plain_test(general, 'depth_clamp')
add_plain_test(general, 'depth-clamp-range')
add_plain_test(general, 'depthfunc')
add_plain_test(general, 'dlist-clear')
add_plain_test(general, 'dlist-fdo3129-01')
add_plain_test(general, 'dlist-fdo3129-02')
add_plain_test(general, 'dlist-fdo31590')
add_plain_test(general, 'draw-arrays-colormaterial')
add_plain_test(general, 'draw-batch')
add_plain_test(general, 'draw-copypixels-sync')
add_plain_test(general, 'draw-elements')
general['draw-elements-user'] = PlainExecTest(['draw-elements', '-auto', 'user'])
add_plain_test(general, 'draw-elements-vs-inputs')
add_plain_test(general, 'draw-instanced')
add_plain_test(general, 'draw-instanced-divisor')
add_concurrent_test(general, 'draw-pixel-with-texture')
add_plain_test(general, 'draw-vertices')
general['draw-vertices-user'] = PlainExecTest(['draw-vertices', '-auto', 'user'])
add_plain_test(general, 'draw-vertices-half-float')
general['draw-vertices-half-float-user'] = PlainExecTest(['draw-vertices-half-float', '-auto', 'user'])
add_plain_test(general, 'early-z')
add_plain_test(general, 'fog-modes')
add_plain_test(general, 'fragment-center')
add_plain_test(general, 'framebuffer-srgb')
add_plain_test(general, 'geterror-invalid-enum')
add_plain_test(general, 'geterror-inside-begin')
add_plain_test(general, 'gl30basic')
add_plain_test(general, 'hiz')
add_plain_test(general, 'infinite-spot-light')
add_plain_test(general, 'isbufferobj')
add_plain_test(general, 'line-aa-width')
add_plain_test(general, 'linestipple')
add_plain_test(general, 'longprim')
add_plain_test(general, 'object_purgeable-api-pbo')
add_plain_test(general, 'object_purgeable-api-texture')
add_plain_test(general, 'object_purgeable-api-vbo')
add_plain_test(general, 'occlusion_query')
add_plain_test(general, 'occlusion-query-discard')
add_plain_test(general, 'pbo-drawpixels')
add_plain_test(general, 'pbo-read-argb8888')
add_plain_test(general, 'pbo-readpixels-small')
add_plain_test(general, 'pbo-teximage')
add_plain_test(general, 'pbo-teximage-tiling')
add_plain_test(general, 'pbo-teximage-tiling-2')
add_plain_test(general, 'point-line-no-cull')
add_plain_test(general, 'polygon-mode')
add_plain_test(general, 'pos-array')
add_plain_test(general, 'primitive-restart')
add_plain_test(general, 'provoking-vertex')
add_plain_test(general, 'oes-read-format')
add_plain_test(general, 'quad-invariance')
add_plain_test(general, 'read-front')
add_plain_test(general, 'roundmode-getintegerv')
add_plain_test(general, 'roundmode-pixelstore')
add_plain_test(general, 'scissor-bitmap')
add_plain_test(general, 'scissor-clear')
add_plain_test(general, 'scissor-copypixels')
add_plain_test(general, 'scissor-depth-clear')
add_plain_test(general, 'scissor-many')
add_plain_test(general, 'scissor-offscreen')
add_plain_test(general, 'scissor-stencil-clear')
general['GL_SELECT - no test function'] = PlainExecTest(['select', 'general'])
general['GL_SELECT - depth-test enabled'] = PlainExecTest(['select', 'depth'])
general['GL_SELECT - stencil-test enabled'] = PlainExecTest(['select', 'stencil'])
general['GL_SELECT - alpha-test enabled'] = PlainExecTest(['select', 'alpha'])
general['GL_SELECT - scissor-test enabled'] = PlainExecTest(['select', 'scissor'])
add_plain_test(general, 'stencil-drawpixels')
add_plain_test(general, 'stencil-twoside')
add_plain_test(general, 'stencil-wrap')
add_plain_test(general, 'sync_api')
add_plain_test(general, 'texgen')
add_plain_test(general, 'texunits')
add_plain_test(general, 'timer_query')
add_plain_test(general, 'two-sided-lighting')
add_plain_test(general, 'two-sided-lighting-separate-specular')
add_plain_test(general, 'user-clip')
add_plain_test(general, 'vs-point_size-zero')
add_plain_test(general, 'vao-01')
add_plain_test(general, 'vao-02')
add_concurrent_test(general, 'vao-element-array-buffer')
add_plain_test(general, 'varray-disabled')
add_plain_test(general, 'vbo-bufferdata')
add_plain_test(general, 'vbo-map-remap')
add_plain_test(general, 'vbo-subdata-sync')
add_plain_test(general, 'vbo-subdata-zero')
add_plain_test(general, 'windowoverlap')
add_plain_test(general, 'clear-accum')
add_fbo_depthstencil_tests(general, 'default_fb')

shaders = Group()

def add_shader_test_dir(group, dirpath, recursive=False):
	"""Add all shader tests in a directory to the given group."""
	for filename in os.listdir(dirpath):
		filepath = path.join(dirpath, filename)
		if path.isdir(filepath):
			if not recursive:
				continue
			if not filename in group:
				group[filename] = Group()
			add_shader_test_dir(group[filename], filepath, recursive)
		else:
			ext = filename.rsplit('.')[-1]
			if ext != 'shader_test':
				continue
			testname = filename[0:-(len(ext) + 1)] # +1 for '.'
			group[testname] = concurrent_test('shader_runner ' + filepath)

def add_getactiveuniform_count(group, name, expected):
	path = 'shaders/'
	group['glsl-getactiveuniform-count: ' + name] = PlainExecTest(['glsl-getactiveuniform-count',
								   '-auto',
								   path + name + '.vert',
								   expected])

add_shader_test_dir(shaders,
                    testsDir + '/shaders',
                    recursive=True)
add_plain_test(shaders, 'activeprogram-bad-program')
add_plain_test(shaders, 'activeprogram-get')
add_plain_test(shaders, 'ati-fs-bad-delete')
add_plain_test(shaders, 'attribute0')
add_plain_test(shaders, 'createshaderprogram-bad-type')
add_plain_test(shaders, 'createshaderprogram-attached-shaders')
add_plain_test(shaders, 'fp-abs-01')
add_plain_test(shaders, 'fp-abs-02')
add_plain_test(shaders, 'fp-condition_codes-01')
add_plain_test(shaders, 'fp-fog')
add_plain_test(shaders, 'fp-formats')
add_plain_test(shaders, 'fp-lit-mask')
add_plain_test(shaders, 'fp-lit-src-equals-dst')
add_plain_test(shaders, 'fp-fragment-position')
add_plain_test(shaders, 'fp-kil')
add_plain_test(shaders, 'fp-incomplete-tex')
add_plain_test(shaders, 'fp-indirections')
add_plain_test(shaders, 'fp-indirections2')
add_plain_test(shaders, 'fp-long-alu')
add_plain_test(shaders, 'fp-rfl')
add_plain_test(shaders, 'fp-set-01')
add_plain_test(shaders, 'fp-set-02')
add_plain_test(shaders, 'fp-unpack-01')
add_plain_test(shaders, 'trinity-fp1')
add_plain_test(shaders, 'glsl-arb-fragment-coord-conventions')
add_plain_test(shaders, 'glsl-arb-fragment-coord-conventions-define')
add_plain_test(shaders, 'glsl-bug-22603')
add_plain_test(shaders, 'glsl-bindattriblocation')
add_plain_test(shaders, 'glsl-dlist-getattriblocation')
add_plain_test(shaders, 'glsl-getactiveuniform-array-size')
add_getactiveuniform_count(shaders, 'glsl-getactiveuniform-length', '1')
add_getactiveuniform_count(shaders, 'glsl-getactiveuniform-ftransform', '2')
add_getactiveuniform_count(shaders, 'glsl-getactiveuniform-mvp', '2')
add_plain_test(shaders, 'glsl-getactiveuniform-length')
add_plain_test(shaders, 'glsl-getattriblocation')
add_plain_test(shaders, 'getuniform-01')
add_plain_test(shaders, 'getuniform-02')
add_plain_test(shaders, 'glsl-invalid-asm-01')
add_plain_test(shaders, 'glsl-invalid-asm-02')
add_plain_test(shaders, 'glsl-novertexdata')
add_plain_test(shaders, 'glsl-preprocessor-comments')
add_plain_test(shaders, 'glsl-reload-source')
add_plain_test(shaders, 'glsl-uniform-out-of-bounds')
add_plain_test(shaders, 'glsl-uniform-update')
add_plain_test(shaders, 'glsl-unused-varying')
add_plain_test(shaders, 'glsl-fs-bug25902')
add_plain_test(shaders, 'glsl-fs-color-matrix')
add_plain_test(shaders, 'glsl-fs-discard-02')
add_plain_test(shaders, 'glsl-fs-exp2')
add_plain_test(shaders, 'glsl-fs-flat-color')
add_plain_test(shaders, 'glsl-fs-fogcolor-statechange')
add_plain_test(shaders, 'glsl-fs-fragcoord')
add_plain_test(shaders, 'glsl-fs-fragcoord-zw-ortho')
add_plain_test(shaders, 'glsl-fs-fragcoord-zw-perspective')
add_plain_test(shaders, 'glsl-fs-loop')
add_plain_test(shaders, 'glsl-fs-loop-nested')
add_plain_test(shaders, 'glsl-fs-mix')
add_plain_test(shaders, 'glsl-fs-mix-constant')
add_plain_test(shaders, 'glsl-fs-pointcoord')
add_plain_test(shaders, 'glsl-fs-raytrace-bug27060')
add_plain_test(shaders, 'glsl-fs-sampler-numbering')
add_plain_test(shaders, 'glsl-fs-shader-stencil-export')
add_plain_test(shaders, 'glsl-fs-sqrt-branch')
add_plain_test(shaders, 'glsl-fs-sqrt-zero')
shaders['glsl-fs-texturecube'] = PlainExecTest(['glsl-fs-texturecube',
					       '-auto'])
shaders['glsl-fs-texturecube-bias'] = PlainExecTest(['glsl-fs-texturecube',
						    '-auto', '-bias'])
shaders['glsl-fs-texturecube-2'] = PlainExecTest(['glsl-fs-texturecube-2',
						 '-auto'])
shaders['glsl-fs-texturecube-2-bias'] = PlainExecTest(['glsl-fs-texturecube-2',
						      '-auto', '-bias'])
add_plain_test(shaders, 'glsl-fs-textureenvcolor-statechange')
shaders['glsl-fs-texture2drect'] = PlainExecTest(['glsl-fs-texture2drect',
					       '-auto'])
shaders['glsl-fs-texture2drect-proj3'] = PlainExecTest(['glsl-fs-texture2drect',
							'-auto', '-proj3'])
shaders['glsl-fs-texture2drect-proj4'] = PlainExecTest(['glsl-fs-texture2drect',
							'-auto', '-proj4'])
add_plain_test(shaders, 'glsl-fs-texturelod-01')
add_plain_test(shaders, 'glsl-fs-user-varying-ff')
add_plain_test(shaders, 'glsl-mat-attribute')
add_plain_test(shaders, 'glsl-max-varyings')
add_plain_test(shaders, 'glsl-orangebook-ch06-bump')
add_plain_test(shaders, 'glsl-routing')
add_plain_test(shaders, 'glsl-vs-arrays')
add_plain_test(shaders, 'glsl-vs-normalscale')
add_plain_test(shaders, 'glsl-vs-functions')
add_plain_test(shaders, 'glsl-vs-user-varying-ff')
add_plain_test(shaders, 'glsl-vs-texturematrix-1')
add_plain_test(shaders, 'glsl-vs-texturematrix-2')
add_plain_test(shaders, 'glsl-sin')
add_plain_test(shaders, 'glsl-cos')
add_plain_test(shaders, 'glsl-vs-if-bool')
add_plain_test(shaders, 'glsl-vs-loop')
add_plain_test(shaders, 'glsl-vs-loop-nested')
add_plain_test(shaders, 'glsl-vs-mov-after-deref')
add_plain_test(shaders, 'glsl-vs-mvp-statechange')
add_plain_test(shaders, 'glsl-vs-raytrace-bug26691')
add_plain_test(shaders, 'glsl-vs-sqrt-zero')
add_plain_test(shaders, 'glsl-vs-statechange-1')
add_plain_test(shaders, 'vp-address-01')
add_plain_test(shaders, 'vp-address-02')
add_plain_test(shaders, 'vp-address-03')
add_plain_test(shaders, 'vp-address-04')
add_plain_test(shaders, 'vp-address-05')
add_plain_test(shaders, 'vp-address-06')
add_plain_test(shaders, 'vp-bad-program')
add_plain_test(shaders, 'vp-clipdistance-01')
add_plain_test(shaders, 'vp-clipdistance-02')
add_plain_test(shaders, 'vp-clipdistance-03')
add_plain_test(shaders, 'vp-clipdistance-04')
add_plain_test(shaders, 'vp-combined-image-units')
add_plain_test(shaders, 'vp-max-array')
add_plain_test(shaders, 'glsl-derivs')
add_plain_test(shaders, 'glsl-deriv-varyings')
add_plain_test(shaders, 'glsl-fwidth')
add_plain_test(shaders, 'glsl-lod-bias')
add_plain_test(shaders, 'vp-ignore-input')
add_plain_test(shaders, 'glsl-empty-vs-no-fs')
add_plain_test(shaders, 'glsl-useprogram-displaylist')
add_plain_test(shaders, 'glsl-vs-point-size')
add_plain_test(shaders, 'glsl-light-model')
add_plain_test(shaders, 'glsl-link-bug30552')
add_plain_test(shaders, 'glsl-link-bug38015')
add_plain_test(shaders, 'glsl-link-empty-prog-01')
add_plain_test(shaders, 'glsl-link-empty-prog-02')
shaders['GLSL link single global initializer, 2 shaders'] = concurrent_test('glsl-link-test shaders/glsl-link-initializer-01a.vert shaders/glsl-link-initializer-01b.vert pass')
shaders['GLSL link matched global initializer, 2 shaders'] = concurrent_test('glsl-link-test shaders/glsl-link-initializer-01c.vert shaders/glsl-link-initializer-01d.vert pass')
shaders['GLSL link mismatched global initializer, 2 shaders'] = concurrent_test('glsl-link-test shaders/glsl-link-initializer-01b.vert shaders/glsl-link-initializer-01d.vert fail')
shaders['GLSL link mismatched global initializer, 3 shaders'] = concurrent_test('glsl-link-test shaders/glsl-link-initializer-01a.vert shaders/glsl-link-initializer-01b.vert shaders/glsl-link-initializer-01c.vert fail')
shaders['GLSL link mismatched global const initializer'] = concurrent_test('glsl-link-test shaders/glsl-link-initializer-02a.vert shaders/glsl-link-initializer-02b.vert fail')
shaders['GLSL link two programs, global initializer'] = concurrent_test('glsl-link-initializer-03')
shaders['GLSL link matched global initializer expression'] = concurrent_test('glsl-link-test shaders/glsl-link-initializer-05a.vert shaders/glsl-link-initializer-05b.vert fail')
shaders['GLSL link mismatched global initializer expression'] = concurrent_test('glsl-link-test shaders/glsl-link-initializer-06a.vert shaders/glsl-link-initializer-06b.vert fail')
shaders['GLSL link mismatched invariant'] = concurrent_test('glsl-link-test shaders/glsl-link-invariant-01a.vert shaders/glsl-link-invariant-01b.vert fail')
shaders['GLSL link mismatched centroid'] = concurrent_test('glsl-link-test shaders/glsl-link-centroid-01a.vert shaders/glsl-link-centroid-01b.vert fail')
shaders['GLSL link array-of-struct-of-array'] = concurrent_test('glsl-link-test shaders/glsl-link-struct-array.frag pass')
add_plain_test(shaders, 'glsl-max-vertex-attrib')
add_plain_test(shaders, 'glsl-kwin-blur-1')
add_plain_test(shaders, 'glsl-kwin-blur-2')
add_plain_test(shaders, 'gpu_shader4_attribs')
add_plain_test(shaders, 'link-mismatch-layout-01')
add_plain_test(shaders, 'link-mismatch-layout-02')
add_plain_test(shaders, 'link-mismatch-layout-03')
add_plain_test(shaders, 'link-unresolved-function')
add_plain_test(shaders, 'sso-simple')
add_plain_test(shaders, 'sso-uniforms-01')
add_plain_test(shaders, 'sso-uniforms-02')
add_plain_test(shaders, 'sso-user-varying-01')
add_plain_test(shaders, 'sso-user-varying-02')
add_plain_test(shaders, 'useprogram-flushverts-1')
add_plain_test(shaders, 'useprogram-flushverts-2')
add_plain_test(shaders, 'useprogram-inside-begin')
add_plain_test(shaders, 'useprogram-refcount-1')
add_plain_test(shaders, 'useshaderprogram-bad-type')
add_plain_test(shaders, 'useshaderprogram-bad-program')
add_plain_test(shaders, 'useshaderprogram-flushverts-1')

vpfpgeneric = Group()
def add_vpfpgeneric(name):
	vpfpgeneric[name] = PlainExecTest(['vpfp-generic', '-auto', testsDir + '/shaders/generic/' + name + '.vpfp'])
add_vpfpgeneric('arl')
add_vpfpgeneric('big-param')
add_vpfpgeneric('dataflow-bug')
add_vpfpgeneric('fdo30337a')
add_vpfpgeneric('fdo30337b')
add_vpfpgeneric('fdo38145')
add_vpfpgeneric('fogcoord-dp3')
add_vpfpgeneric('fogcoord-dph')
add_vpfpgeneric('fogcoord-dp4')
add_vpfpgeneric('fp-arb-fragment-coord-conventions-none')
add_vpfpgeneric('fp-arb-fragment-coord-conventions-integer')
add_vpfpgeneric('fp-cmp')
add_vpfpgeneric('fp-dst-aliasing-1')
add_vpfpgeneric('fp-dst-aliasing-2')
add_vpfpgeneric('fp-ex2-sat')
add_vpfpgeneric('fp-two-constants')
add_vpfpgeneric('nv-mov')
add_vpfpgeneric('nv-add')
add_vpfpgeneric('nv-arl')
add_vpfpgeneric('nv-init-zero-reg')
add_vpfpgeneric('nv-init-zero-addr')
add_vpfpgeneric('vp-arl-constant-array')
add_vpfpgeneric('vp-arl-constant-array-huge')
add_vpfpgeneric('vp-arl-constant-array-huge-varying')
add_vpfpgeneric('vp-arl-constant-array-huge-offset')
add_vpfpgeneric('vp-arl-constant-array-huge-offset-neg')
add_vpfpgeneric('vp-arl-constant-array-huge-overwritten')
add_vpfpgeneric('vp-arl-constant-array-huge-relative-offset')
add_vpfpgeneric('vp-arl-constant-array-varying')
add_vpfpgeneric('vp-arl-env-array')
add_vpfpgeneric('vp-arl-local-array')
add_vpfpgeneric('vp-arl-neg-array')
add_vpfpgeneric('vp-arl-neg-array-2')
add_vpfpgeneric('vp-constant-array')
add_vpfpgeneric('vp-constant-array-huge')
add_vpfpgeneric('vp-constant-negate')
add_vpfpgeneric('vp-exp-alias')
add_vpfpgeneric('vp-max')
add_vpfpgeneric('vp-min')
add_vpfpgeneric('vp-sge-alias')
add_vpfpgeneric('vp-two-constants')
shaders['vpfp-generic'] = vpfpgeneric

bugs = Group()
add_plain_test(bugs, 'crash-cubemap-order')
add_plain_test(bugs, 'crash-texparameter-before-teximage')
add_plain_test(bugs, 'drawbuffer-modes')
add_plain_test(bugs, 'fdo9833')
add_plain_test(bugs, 'fdo10370')
add_plain_test(bugs, 'fdo14575')
add_plain_test(bugs, 'fdo20701')
add_plain_test(bugs, 'fdo22540')
add_plain_test(bugs, 'fdo23489')
add_plain_test(bugs, 'fdo23670-depth_test')
add_plain_test(bugs, 'fdo23670-drawpix_stencil')
add_plain_test(bugs, 'fdo24066')
add_plain_test(bugs, 'fdo25614-genmipmap')
add_plain_test(bugs, 'fdo28551')
add_plain_test(bugs, 'fdo31934')
add_plain_test(bugs, 'point-sprite')
add_plain_test(bugs, 'r300-readcache')
add_plain_test(bugs, 'tex1d-2dborder')
add_plain_test(bugs, 'tri-tex-crash')
add_plain_test(bugs, 'vbo-buffer-unmap')

glx = Group()
add_plain_test(glx, 'glx-copy-sub-buffer')
add_plain_test(glx, 'glx-destroycontext-1')
add_plain_test(glx, 'glx-destroycontext-2')
add_plain_test(glx, 'glx-close-display')
add_plain_test(glx, 'glx-fbconfig-sanity')
glx['glx-fbconfig-sanity'].runConcurrent = True
add_plain_test(glx, 'glx-fbconfig-compliance')
glx['glx-fbconfig-compliance'].runConcurrent = True
add_plain_test(glx, 'glx-fbo-binding')
add_plain_test(glx, 'glx-multi-context-ib-1')
add_plain_test(glx, 'glx-multithread')
add_plain_test(glx, 'glx-multithread-makecurrent-1')
add_plain_test(glx, 'glx-multithread-makecurrent-2')
add_plain_test(glx, 'glx-multithread-makecurrent-3')
add_plain_test(glx, 'glx-multithread-makecurrent-4')
add_plain_test(glx, 'glx-shader-sharing')
add_plain_test(glx, 'glx-swap-exchange')
glx['glx-swap-event_event'] = PlainExecTest(['glx-swap-event', '-auto', '--event'])
glx['glx-swap-event_async'] = PlainExecTest(['glx-swap-event', '-auto', '--async'])
glx['glx-swap-event_interval'] = PlainExecTest(['glx-swap-event', '-auto', '--interval'])
add_plain_test(glx, 'glx-swap-pixmap')
add_plain_test(glx, 'glx-swap-pixmap-bad')
add_plain_test(glx, 'glx-swap-singlebuffer')
add_plain_test(glx, 'glx-make-current')
add_plain_test(glx, 'glx-make-glxdrawable-current')
add_plain_test(glx, 'glx-pixmap-life')
glx['glx-pixmap-life'].runConcurrent = True
add_plain_test(glx, 'glx-pixmap13-life')
glx['glx-pixmap13-life'].runConcurrent = True
add_plain_test(glx, 'glx-pixmap-multi')
glx['glx-pixmap-multi'].runConcurrent = True
add_plain_test(glx, 'glx-tfp')
add_plain_test(glx, 'glx-visuals-depth')
add_concurrent_test(glx, 'glx-visuals-depth -pixmap')
add_plain_test(glx, 'glx-visuals-stencil')
add_concurrent_test(glx, 'glx-visuals-stencil -pixmap')
add_plain_test(glx, 'glx-window-life')
glx['glx-window-life'].runConcurrent = True
add_plain_test(glx, 'glx-pixmap-crosscheck')
glx['glx-pixmap-crosscheck'].runConcurrent = True
glx['glx-query-drawable-GLX_WIDTH'] = PlainExecTest(['glx-query-drawable', '-auto', '--attr=GLX_WIDTH'])
glx['glx-query-drawable-GLX_HEIGHT'] = PlainExecTest(['glx-query-drawable', '-auto', '--attr=GLX_HEIGHT'])
glx['glx-query-drawable-GLXBadDrawable'] = PlainExecTest(['glx-query-drawable', '-auto', '--bad-drawable'])

import_context = Group();
glx['GLX_EXT_import_context'] = import_context
import_context['free context'] = PlainExecTest(['glx-free-context'])
import_context['get context ID'] = PlainExecTest(['glx-get-context-id'])
import_context['get current display'] = PlainExecTest(['glx-get-current-display-ext'])
import_context['imported context has same context ID'] = PlainExecTest(['glx-import-context-has-same-context-id'])
import_context['import context, multi process'] = PlainExecTest(['glx-import-context-multi-process'])
import_context['import context, single process'] = PlainExecTest(['glx-import-context-single-process'])
import_context['make current, multi process'] = PlainExecTest(['glx-make-current-multi-process'])
import_context['make current, single process'] = PlainExecTest(['glx-make-current-single-process'])
import_context['query context info'] = PlainExecTest(['glx-query-context-info-ext'])

create_context = Group();
glx['GLX_ARB_create_context'] = create_context
create_context['default major version'] = PlainExecTest(['glx-create-context-default-major-version'])
create_context['default minor version'] = PlainExecTest(['glx-create-context-default-minor-version'])
create_context['invalid attribute'] = PlainExecTest(['glx-create-context-invalid-attribute'])
create_context['invalid flag'] = PlainExecTest(['glx-create-context-invalid-flag'])
create_context['forward-compatible flag with pre-3.0'] = PlainExecTest(['glx-create-context-invalid-flag-forward-compatible'])
create_context['invalid OpenGL version'] = PlainExecTest(['glx-create-context-invalid-gl-version'])
create_context['invalid render type'] = PlainExecTest(['glx-create-context-invalid-render-type'])
create_context['color-index render type with 3.0'] = PlainExecTest(['glx-create-context-invalid-render-type-color-index'])
create_context['empty attribute list'] = PlainExecTest(['glx-create-context-valid-attribute-empty'])
create_context['NULL attribute list'] = PlainExecTest(['glx-create-context-valid-attribute-null'])
create_context['forward-compatible flag with 3.0'] = PlainExecTest(['glx-create-context-valid-flag-forward-compatible'])

texturing = Group()
add_concurrent_test(texturing, '1-1-linear-texture')
add_plain_test(texturing, 'array-texture')
add_plain_test(texturing, 'copytexsubimage')
add_plain_test(texturing, 'copyteximage')
add_plain_test(texturing, 'copyteximage-border')
add_plain_test(texturing, 'copyteximage-clipping')
add_plain_test(texturing, 'cubemap')
texturing['cubemap npot'] = PlainExecTest(['cubemap', '-auto', 'npot'])
add_plain_test(texturing, 'depth-level-clamp')
add_plain_test(texturing, 'depth-tex-modes')
add_plain_test(texturing, 'depth-tex-modes-glsl')
add_plain_test(texturing, 'depth-tex-modes-rg')
add_plain_test(texturing, 'depth-tex-compare')
add_plain_test(texturing, 'depth-cube-map')
add_plain_test(texturing, 'fragment-and-vertex-texturing')
add_plain_test(texturing, 'fxt1-teximage')
add_plain_test(texturing, 'gen-teximage')
add_plain_test(texturing, 'gen-compressed-teximage')
add_plain_test(texturing, 'gen-nonzero-unit')
add_plain_test(texturing, 'gen-texsubimage')
add_plain_test(texturing, 'getteximage-formats')
add_plain_test(texturing, 'getteximage-simple')

texturing['incomplete-texture-fixed'] = concurrent_test('incomplete-texture -auto fixed')
texturing['incomplete-texture-arb_fp'] = concurrent_test('incomplete-texture -auto arb_fp')
texturing['incomplete-texture-glsl'] = concurrent_test('incomplete-texture -auto glsl')

add_plain_test(texturing, 'levelclamp')
add_plain_test(texturing, 'lodbias')
add_plain_test(texturing, 'lodclamp')
add_plain_test(texturing, 'lodclamp-between')
add_plain_test(texturing, 'lodclamp-between-max')
add_plain_test(texturing, 'mipmap-setup')
add_plain_test(texturing, 'rg-draw-pixels')
add_plain_test(texturing, 'rg-teximage-01')
add_plain_test(texturing, 'rg-teximage-02')
add_plain_test(texturing, 'rgtc-teximage-01')
add_plain_test(texturing, 'rgtc-teximage-02')
add_plain_test(texturing, 's3tc-teximage')
add_plain_test(texturing, 's3tc-texsubimage')
add_plain_test(texturing, 'sampler-cube-shadow')
add_concurrent_test(texturing, 'sized-texture-format-channels')
add_plain_test(texturing, 'streaming-texture-leak')
add_plain_test(texturing, 'tex-border-1')
texturing['tex-miplevel-selection'] = PlainExecTest(['tex-miplevel-selection', '-auto', '-nobias', '-nolod'])
texturing['tex-miplevel-selection-lod'] = PlainExecTest(['tex-miplevel-selection', '-auto', '-nobias'])
texturing['tex-miplevel-selection-lod-bias'] = PlainExecTest(['tex-miplevel-selection', '-auto'])
add_plain_test(texturing, 'tex-skipped-unit')
add_plain_test(texturing, 'tex-swizzle')
add_plain_test(texturing, 'tex3d')
add_plain_test(texturing, 'tex3d-maxsize')
add_plain_test(texturing, 'tex3d-npot')
add_plain_test(texturing, 'texdepth')
add_plain_test(texturing, 'teximage-errors')
add_plain_test(texturing, 'texrect-many')
add_plain_test(texturing, 'texredefine')
add_plain_test(texturing, 'texsubimage')
add_plain_test(texturing, 'texture-al')
add_plain_test(texturing, 'texture-integer')
add_plain_test(texturing, 'texture-packed-formats')
add_plain_test(texturing, 'texture-rg')
add_plain_test(texturing, 'tex-srgb')

def texwrap_test(args):
	test = PlainExecTest(args + ['-fbo'])
	test.runConcurrent = True
	return test
def add_texwrap_test1(group, p1):
	group['texwrap-' + p1] = texwrap_test(['texwrap', '-auto', p1])
	group['texwrap-' + p1 + '-bordercolor'] = texwrap_test(['texwrap', '-auto', p1, 'bordercolor'])
def add_texwrap_test2(group, p1, p2):
	group['texwrap-' + p1 + '-' + p2] = texwrap_test(['texwrap', '-auto', p1, p2])
	group['texwrap-' + p1 + '-' + p2 + '-bordercolor'] = texwrap_test(['texwrap', '-auto', p1, p2, 'bordercolor'])
def add_texwrap_test3(group, p1, p2, p3):
	group['texwrap-' + p1 + '-' + p2 + '-' + p3] = texwrap_test(['texwrap', '-auto', p1, p2, p3])
	group['texwrap-' + p1 + '-' + p2 + '-' + p3 + '-bordercolor'] = texwrap_test(['texwrap', '-auto', p1, p2, p3, 'bordercolor'])

def add_fbo_depth_tests(group, format):
	group['fbo-depth-' + format + '-tex1d'] = PlainExecTest(['fbo-depth-tex1d', '-auto', format])
	group['fbo-depth-' + format + '-clear'] = PlainExecTest(['fbo-depth', '-auto', 'clear', format])
	group['fbo-depth-' + format + '-readpixels'] = PlainExecTest(['fbo-depth', '-auto', 'readpixels', format])
	group['fbo-depth-' + format + '-drawpixels'] = PlainExecTest(['fbo-depth', '-auto', 'drawpixels', format])
	group['fbo-depth-' + format + '-copypixels'] = PlainExecTest(['fbo-depth', '-auto', 'copypixels', format])
	group['fbo-depth-' + format + '-blit'] = PlainExecTest(['fbo-depth', '-auto', 'blit', format])

def add_fbo_stencil_tests(group, format):
	group['fbo-stencil-' + format + '-clear'] = PlainExecTest(['fbo-stencil', '-auto', 'clear', format])
	group['fbo-stencil-' + format + '-readpixels'] = PlainExecTest(['fbo-stencil', '-auto', 'readpixels', format])
	group['fbo-stencil-' + format + '-drawpixels'] = PlainExecTest(['fbo-stencil', '-auto', 'drawpixels', format])
	group['fbo-stencil-' + format + '-copypixels'] = PlainExecTest(['fbo-stencil', '-auto', 'copypixels', format])
	group['fbo-stencil-' + format + '-blit'] = PlainExecTest(['fbo-stencil', '-auto', 'blit', format])

spec = Group()

gl11 = Group()
spec['!OpenGL 1.1'] = gl11
add_texwrap_test1(gl11, '1D')
add_texwrap_test2(gl11, '1D', 'proj')
add_texwrap_test2(gl11, '2D', 'proj')
add_texwrap_test2(gl11, '2D', 'GL_RGBA2')
add_texwrap_test2(gl11, '2D', 'GL_R3_G3_B2')
add_texwrap_test2(gl11, '2D', 'GL_RGB4')
add_texwrap_test2(gl11, '2D', 'GL_RGBA4')
add_texwrap_test2(gl11, '2D', 'GL_RGB5')
add_texwrap_test2(gl11, '2D', 'GL_RGB5_A1')
add_texwrap_test2(gl11, '2D', 'GL_RGB8')
add_texwrap_test2(gl11, '2D', 'GL_RGBA8')
add_texwrap_test2(gl11, '2D', 'GL_RGB10')
add_texwrap_test2(gl11, '2D', 'GL_RGB10_A2')
add_texwrap_test2(gl11, '2D', 'GL_RGB12')
add_texwrap_test2(gl11, '2D', 'GL_RGBA12')
add_texwrap_test2(gl11, '2D', 'GL_RGB16')
add_texwrap_test2(gl11, '2D', 'GL_RGBA16')
add_texwrap_test2(gl11, '2D', 'GL_ALPHA4')
add_texwrap_test2(gl11, '2D', 'GL_ALPHA8')
add_texwrap_test2(gl11, '2D', 'GL_ALPHA12')
add_texwrap_test2(gl11, '2D', 'GL_ALPHA16')
add_texwrap_test2(gl11, '2D', 'GL_LUMINANCE4')
add_texwrap_test2(gl11, '2D', 'GL_LUMINANCE8')
add_texwrap_test2(gl11, '2D', 'GL_LUMINANCE12')
add_texwrap_test2(gl11, '2D', 'GL_LUMINANCE16')
add_texwrap_test2(gl11, '2D', 'GL_LUMINANCE4_ALPHA4')
add_texwrap_test2(gl11, '2D', 'GL_LUMINANCE6_ALPHA2')
add_texwrap_test2(gl11, '2D', 'GL_LUMINANCE8_ALPHA8')
add_texwrap_test2(gl11, '2D', 'GL_LUMINANCE12_ALPHA4')
add_texwrap_test2(gl11, '2D', 'GL_LUMINANCE12_ALPHA12')
add_texwrap_test2(gl11, '2D', 'GL_LUMINANCE16_ALPHA16')
add_texwrap_test2(gl11, '2D', 'GL_INTENSITY4')
add_texwrap_test2(gl11, '2D', 'GL_INTENSITY8')
add_texwrap_test2(gl11, '2D', 'GL_INTENSITY12')
add_texwrap_test2(gl11, '2D', 'GL_INTENSITY16')

gl12 = Group()
spec['!OpenGL 1.2'] = gl12
add_texwrap_test1(gl12, '3D')
add_texwrap_test2(gl12, '3D', 'proj')

gl20 = Group()
spec['!OpenGL 2.0'] = gl20
add_texwrap_test2(gl20, '1D', 'npot')
add_texwrap_test3(gl20, '1D', 'npot', 'proj')
add_texwrap_test2(gl20, '2D', 'npot')
add_texwrap_test3(gl20, '2D', 'npot', 'proj')
add_texwrap_test2(gl20, '3D', 'npot')
add_texwrap_test3(gl20, '3D', 'npot', 'proj')
add_plain_test(gl20, 'getattriblocation-conventional')
add_plain_test(gl20, 'clip-flag-behavior')
add_concurrent_test(gl20, 'vertex-program-two-side enabled front back front2 back2')
add_concurrent_test(gl20, 'vertex-program-two-side enabled front back front2')
add_concurrent_test(gl20, 'vertex-program-two-side enabled front back back2')
add_concurrent_test(gl20, 'vertex-program-two-side enabled front back')
add_concurrent_test(gl20, 'vertex-program-two-side enabled front front2 back2')
add_concurrent_test(gl20, 'vertex-program-two-side enabled front front2')
add_concurrent_test(gl20, 'vertex-program-two-side enabled front back2')
add_concurrent_test(gl20, 'vertex-program-two-side enabled front')
add_concurrent_test(gl20, 'vertex-program-two-side enabled back front2 back2')
add_concurrent_test(gl20, 'vertex-program-two-side enabled back front2')
add_concurrent_test(gl20, 'vertex-program-two-side enabled back back2')
add_concurrent_test(gl20, 'vertex-program-two-side enabled back')
add_concurrent_test(gl20, 'vertex-program-two-side enabled front2 back2')
add_concurrent_test(gl20, 'vertex-program-two-side enabled front2')
add_concurrent_test(gl20, 'vertex-program-two-side enabled back2')
add_concurrent_test(gl20, 'vertex-program-two-side enabled')
add_concurrent_test(gl20, 'vertex-program-two-side front back front2 back2')
add_concurrent_test(gl20, 'vertex-program-two-side front back front2')
add_concurrent_test(gl20, 'vertex-program-two-side front back back2')
add_concurrent_test(gl20, 'vertex-program-two-side front back')
add_concurrent_test(gl20, 'vertex-program-two-side front front2 back2')
add_concurrent_test(gl20, 'vertex-program-two-side front front2')
add_concurrent_test(gl20, 'vertex-program-two-side front back2')
add_concurrent_test(gl20, 'vertex-program-two-side front')
add_concurrent_test(gl20, 'vertex-program-two-side back front2 back2')
add_concurrent_test(gl20, 'vertex-program-two-side back front2')
add_concurrent_test(gl20, 'vertex-program-two-side back back2')
add_concurrent_test(gl20, 'vertex-program-two-side back')
add_concurrent_test(gl20, 'vertex-program-two-side front2 back2')
add_concurrent_test(gl20, 'vertex-program-two-side front2')
add_concurrent_test(gl20, 'vertex-program-two-side back2')
add_concurrent_test(gl20, 'vertex-program-two-side')

gl21 = Group()
spec['!OpenGL 2.1'] = gl21
gl21['minmax'] = concurrent_test('gl-2.1-minmax')

gl30 = Group()
spec['!OpenGL 3.0'] = gl30
add_concurrent_test(gl30, 'bindfragdata-invalid-parameters')
add_concurrent_test(gl30, 'bindfragdata-link-error')
add_concurrent_test(gl30, 'bindfragdata-nonexistent-variable')
add_concurrent_test(gl30, 'clearbuffer-depth')
add_concurrent_test(gl30, 'clearbuffer-depth-stencil')
add_plain_test(gl30, 'clearbuffer-display-lists')
add_concurrent_test(gl30, 'clearbuffer-invalid-drawbuffer')
add_concurrent_test(gl30, 'clearbuffer-invalid-buffer')
add_concurrent_test(gl30, 'clearbuffer-mixed-format')
add_concurrent_test(gl30, 'clearbuffer-stencil')
add_concurrent_test(gl30, 'getfragdatalocation')
gl30['minmax'] = concurrent_test('gl-3.0-minmax')
add_concurrent_test(gl30, 'gl-3.0-required-sized-texture-formats')
add_concurrent_test(gl30, 'gl-3.0-required-renderbuffer-attachment-formats')
add_concurrent_test(gl30, 'gl-3.0-required-texture-attachment-formats')

# Group spec/glsl-1.00
spec['glsl-1.00'] = Group()
import_glsl_parser_tests(spec['glsl-1.00'],
			 os.path.join(testsDir, 'spec', 'glsl-1.00'),
			 ['compiler'])

# Group spec/glsl-1.10
spec['glsl-1.10'] = Group()
import_glsl_parser_tests(spec['glsl-1.10'],
			 os.path.join(testsDir, 'spec', 'glsl-1.10'),
			 ['preprocessor', 'compiler'])
import_glsl_parser_tests(spec['glsl-1.10'],
			 os.path.join(generatedTestDir, 'spec', 'glsl-1.10'),
			 ['preprocessor', 'compiler'])
spec['glsl-1.10']['linker'] = Group()
add_shader_test_dir(spec['glsl-1.10']['linker'],
	            os.path.join(testsDir, 'spec', 'glsl-1.10', 'linker'),
		    recursive=True)
spec['glsl-1.10']['execution'] = Group()
add_shader_test_dir(spec['glsl-1.10']['execution'],
	            os.path.join(testsDir, 'spec', 'glsl-1.10', 'execution'),
		    recursive=True)
add_shader_test_dir(spec['glsl-1.10']['execution'],
		    os.path.join(generatedTestDir, 'spec', 'glsl-1.10', 'execution'),
		    recursive=True)
for mode in ['fixed', 'pos_clipvert', 'clipvert_pos']:
	cmdline = 'clip-plane-transformation ' + mode
	spec['glsl-1.10']['execution']['clipping'][cmdline] = concurrent_test(cmdline)

spec['glsl-1.10']['api'] = Group()
add_concurrent_test(spec['glsl-1.10']['api'], 'getactiveattrib 110');

# Group spec/glsl-1.20
spec['glsl-1.20'] = Group()
import_glsl_parser_tests(spec['glsl-1.20'],
			 os.path.join(testsDir, 'spec', 'glsl-1.20'),
			 ['preprocessor', 'compiler'])
import_glsl_parser_tests(spec['glsl-1.20'],
			 os.path.join(generatedTestDir, 'spec', 'glsl-1.20'),
			 ['compiler'])
spec['glsl-1.20']['execution'] = Group()
add_shader_test_dir(spec['glsl-1.20']['execution'],
	            os.path.join(testsDir, 'spec', 'glsl-1.20', 'execution'),
		    recursive=True)
add_shader_test_dir(spec['glsl-1.20']['execution'],
		    os.path.join(generatedTestDir, 'spec', 'glsl-1.20', 'execution'),
		    recursive=True)

def add_recursion_test(group, name):
	# When the recursion tests fail it is usually because the GLSL
	# compiler tries to recursively inline the function until the process
	# runs out of stack or the system runs out of memory.  Run the test
	# with a low rlimit to (hopefully) avoid having the test adversely
	# affect the rest of the system.  This is especially important since
	# there may be other tests running in parallel.
	#
	# This may cause false negatives on systems that map the framebuffer
	# into the processes address space.  This happens on X with DRI1 based
	# drivers, for example.
	group[name] = PlainExecTest(['recursion', '-auto', '-rlimit', '268435456', name])

rec = Group()
spec['glsl-1.20']['recursion'] = rec
add_recursion_test(rec, 'simple')
add_recursion_test(rec, 'unreachable')
add_recursion_test(rec, 'unreachable-constant-folding')
add_recursion_test(rec, 'indirect')
add_recursion_test(rec, 'indirect-separate')
add_recursion_test(rec, 'indirect-complex')
add_recursion_test(rec, 'indirect-complex-separate')

spec['glsl-1.20']['api'] = Group()
add_concurrent_test(spec['glsl-1.20']['api'], 'getactiveattrib 120');


# Group spec/glsl-1.30
spec['glsl-1.30'] = Group()
import_glsl_parser_tests(spec['glsl-1.30'],
			 os.path.join(testsDir, 'spec', 'glsl-1.30'),
			 ['preprocessor', 'compiler'])
import_glsl_parser_tests(spec['glsl-1.30'],
			 os.path.join(generatedTestDir, 'spec', 'glsl-1.30'),
			 ['compiler'])
spec['glsl-1.30']['execution'] = Group()
spec['glsl-1.30']['execution']['textureSize'] = Group()
spec['glsl-1.30']['execution']['texelFetch'] = Group()
for stage in ['vs', 'fs']:
	# textureSize():
	for sampler in ['sampler1D', 'sampler2D', 'sampler3D', 'samplerCube', 'sampler1DShadow', 'sampler2DShadow', 'samplerCubeShadow', 'sampler1DArray', 'sampler2DArray', 'sampler1DArrayShadow', 'sampler2DArrayShadow', 'isampler1D', 'isampler2D', 'isampler3D', 'isamplerCube', 'isampler1DArray', 'isampler2DArray', 'usampler1D', 'usampler2D', 'usampler3D', 'usamplerCube', 'usampler1DArray', 'usampler2DArray']:
		spec['glsl-1.30']['execution']['textureSize'][stage + '-textureSize-' + sampler] = PlainExecTest(['textureSize', stage, sampler, '-auto', '-fbo'])
	# texelFetch():
	for sampler in ['sampler1D', 'sampler2D', 'sampler3D', 'sampler1DArray', 'sampler2DArray', 'isampler1D', 'isampler2D', 'isampler3D', 'isampler1DArray', 'isampler2DArray', 'usampler1D', 'usampler2D', 'usampler3D', 'usampler1DArray', 'usampler2DArray']:
		spec['glsl-1.30']['execution']['texelFetch'][stage + '-texelFetch-' + sampler] = PlainExecTest(['texelFetch', stage, sampler, '-auto', '-fbo'])
	# texelFetch() with EXT_texture_swizzle mode "b0r1":
	for type in ['i', 'u', '']:
		spec['glsl-1.30']['execution']['texelFetch'][stage + '-texelFetch-' + type + 'sampler2DArray-swizzle'] = PlainExecTest(['texelFetch', stage, type + 'sampler2DArray', 'b0r1', '-auto', '-fbo'])

add_plain_test(spec['glsl-1.30']['execution'], 'fs-texelFetch-2D')
add_plain_test(spec['glsl-1.30']['execution'], 'fs-texelFetchOffset-2D')
add_shader_test_dir(spec['glsl-1.30']['execution'],
	            os.path.join(testsDir, 'spec', 'glsl-1.30', 'execution'),
		    recursive=True)
add_shader_test_dir(spec['glsl-1.30']['execution'],
		    os.path.join(generatedTestDir, 'spec', 'glsl-1.30', 'execution'),
		    recursive=True)
spec['glsl-1.30']['linker'] = Group()
spec['glsl-1.30']['linker']['clipping'] = Group()
add_plain_test(spec['glsl-1.30']['linker']['clipping'], 'mixing-clip-distance-and-clip-vertex-disallowed')
add_plain_test(spec['glsl-1.30']['execution']['clipping'], 'max-clip-distances')
for arg in ['vs_basic', 'vs_xfb', 'vs_fbo', 'fs_basic', 'fs_fbo']:
	test_name = 'isinf-and-isnan ' + arg
	spec['glsl-1.30']['execution'][test_name] = PlainExecTest(test_name + ' -auto')
spec['glsl-1.30']['execution']['clipping']['clip-plane-transformation pos'] = \
    concurrent_test('clip-plane-transformation pos')
spec['glsl-1.30']['texel-offset-limits'] = concurrent_test('glsl-1.30-texel-offset-limits')
add_concurrent_test(spec['glsl-1.30']['execution'], 'vertexid-beginend')
add_concurrent_test(spec['glsl-1.30']['execution'], 'vertexid-drawarrays')
add_concurrent_test(spec['glsl-1.30']['execution'], 'vertexid-drawelements')

spec['glsl-1.30']['api'] = Group()
add_concurrent_test(spec['glsl-1.30']['api'], 'getactiveattrib 130');

# Group AMD_conservative_depth
spec['AMD_conservative_depth'] = Group()
import_glsl_parser_tests(spec['AMD_conservative_depth'],
			 os.path.join(testsDir, 'spec', 'amd_conservative_depth'),
			 [''])

# Group AMD_shader_stencil_export
spec['AMD_shader_stencil_export'] = Group()
import_glsl_parser_tests(spec['AMD_shader_stencil_export'],
			 os.path.join(testsDir, 'spec', 'amd_shader_stencil_export'),
			 [''])

# Group ARB_shader_stencil_export
spec['ARB_shader_stencil_export'] = Group()
import_glsl_parser_tests(spec['ARB_shader_stencil_export'],
			 os.path.join(testsDir, 'spec', 'arb_shader_stencil_export'),
			 [''])

# Group ARB_ES2_compatibility
arb_es2_compatibility = Group()
spec['ARB_ES2_compatibility'] = arb_es2_compatibility
add_plain_test(arb_es2_compatibility, 'arb_es2_compatibility-depthrangef')
add_plain_test(arb_es2_compatibility, 'arb_es2_compatibility-drawbuffers')
add_plain_test(arb_es2_compatibility, 'arb_es2_compatibility-getshaderprecisionformat')
add_plain_test(arb_es2_compatibility, 'arb_es2_compatibility-maxvectors')
add_plain_test(arb_es2_compatibility, 'arb_es2_compatibility-shadercompiler')
add_plain_test(arb_es2_compatibility, 'arb_es2_compatibility-releaseshadercompiler')
add_plain_test(arb_es2_compatibility, 'arb_es2_compatibility-fixed-type')
add_plain_test(arb_es2_compatibility, 'fbo-missing-attachment-clear')
arb_es2_compatibility['FBO blit to missing attachment (ES2 completeness rules)'] = PlainExecTest(['fbo-missing-attachment-blit', '-auto', 'es2', 'to'])
arb_es2_compatibility['FBO blit from missing attachment (ES2 completeness rules)'] = PlainExecTest(['fbo-missing-attachment-blit', '-auto', 'es2', 'from'])

# Group ARB_draw_elements_base_vertex
arb_draw_elements_base_vertex = Group()
spec['ARB_draw_elements_base_vertex'] = arb_draw_elements_base_vertex
arb_draw_elements_base_vertex['dlist-arb_draw_instanced'] = concurrent_test('arb_draw_elements_base_vertex-dlist-arb_draw_instanced')
add_plain_test(arb_draw_elements_base_vertex, 'draw-elements-base-vertex')
arb_draw_elements_base_vertex['draw-elements-base-vertex-user_varrays'] = PlainExecTest(['draw-elements-base-vertex', '-auto', 'user_varrays'])
add_plain_test(arb_draw_elements_base_vertex, 'draw-elements-base-vertex-neg')
add_plain_test(arb_draw_elements_base_vertex, 'draw-elements-base-vertex-bounds')
arb_draw_elements_base_vertex['draw-elements-base-vertex-neg-user_varrays'] = PlainExecTest(['draw-elements-base-vertex-neg', '-auto', 'user_varrays'])
add_plain_test(arb_draw_elements_base_vertex, 'draw-elements-instanced-base-vertex')
arb_draw_elements_base_vertex['draw-elements-instanced-base-vertex-user_varrays'] = PlainExecTest(['draw-elements-instanced-base-vertex', '-auto', 'user_varrays'])

# Group ARB_draw_instanced
arb_draw_instanced = Group()
spec['ARB_draw_instanced'] = arb_draw_instanced
import_glsl_parser_tests(arb_draw_instanced,
                        testsDir + '/spec/arb_draw_instanced',
                        [''])

add_shader_test_dir(arb_draw_instanced,
                    testsDir + '/spec/arb_draw_instanced/execution',
                    recursive=True)
arb_draw_instanced['dlist'] = concurrent_test('arb_draw_instanced-dlist')
arb_draw_instanced['elements'] = concurrent_test('arb_draw_instanced-elements')
arb_draw_instanced['negative-arrays-first-negative'] = concurrent_test('arb_draw_instanced-negative-arrays-first-negative')
arb_draw_instanced['negative-elements-type'] = concurrent_test('arb_draw_instanced-negative-elements-type')

# Group ARB_fragment_program
arb_fragment_program = Group()
spec['ARB_fragment_program'] = arb_fragment_program
add_shader_test_dir(spec['ARB_fragment_program'],
	            os.path.join(testsDir, 'spec', 'arb_fragment_program'),
		    recursive=True)
arb_fragment_program['minmax'] = concurrent_test('arb_fragment_program-minmax')

# Group ARB_fragment_program_shadow
arb_fragment_program_shadow = Group()
spec['ARB_fragment_program_shadow'] = arb_fragment_program_shadow
add_shader_test_dir(spec['ARB_fragment_program_shadow'],
	            os.path.join(testsDir, 'spec', 'arb_fragment_program_shadow'),
		    recursive=True)

# Group ARB_framebuffer_object
arb_framebuffer_object = Group()
spec['ARB_framebuffer_object'] = arb_framebuffer_object
add_concurrent_test(arb_framebuffer_object, 'same-attachment-glFramebufferTexture2D-GL_DEPTH_STENCIL_ATTACHMENT')
add_concurrent_test(arb_framebuffer_object, 'same-attachment-glFramebufferRenderbuffer-GL_DEPTH_STENCIL_ATTACHMENT')

# Group ARB_sampler_objects
arb_sampler_objects = Group()
spec['ARB_sampler_objects'] = arb_sampler_objects
add_plain_test(arb_sampler_objects, 'sampler-objects')

# Group ARB_debug_output
arb_debug_output = Group()
spec['ARB_debug_output'] = arb_debug_output
add_plain_test(arb_debug_output, 'arb_debug_output-api_error')

# Group ARB_robustness
arb_robustness = Group()
spec['ARB_robustness'] = arb_robustness
add_plain_test(arb_robustness, 'arb_robustness_client-mem-bounds')
# TODO: robust vertex buffer access
#add_plain_test(arb_robustness, 'arb_robustness_draw-vbo-bounds')

# Group ARB_shader_texture_lod
arb_shader_texture_lod = Group()
spec['ARB_shader_texture_lod'] = arb_shader_texture_lod
import_glsl_parser_tests(arb_shader_texture_lod,
			 os.path.join(testsDir, 'spec', 'arb_shader_texture_lod'),
			 ['compiler'])
arb_shader_texture_lod['execution'] = Group()
add_shader_test_dir(arb_shader_texture_lod['execution'],
	            os.path.join(testsDir, 'spec', 'arb_shader_texture_lod', 'execution'),
		    recursive=True)
add_plain_test(arb_shader_texture_lod['execution'], 'arb_shader_texture_lod-texgrad')
arb_shader_texture_lod['execution']['tex-miplevel-selection-texture2DLod'] = PlainExecTest(['tex-miplevel-selection', '-auto', '-nobias', '-nolod', '-GL_ARB_shader_texture_lod'])
arb_shader_texture_lod['execution']['tex-miplevel-selection-texture2DLod-lod'] = PlainExecTest(['tex-miplevel-selection', '-auto', '-nobias', '-GL_ARB_shader_texture_lod'])
arb_shader_texture_lod['execution']['tex-miplevel-selection-texture2DLod-lod-bias'] = PlainExecTest(['tex-miplevel-selection', '-auto', '-GL_ARB_shader_texture_lod'])

# Group ARB_shader_objects
arb_shader_objects = Group()
spec['ARB_shader_objects'] = arb_shader_objects
arb_shader_objects['getuniform'] = PlainExecTest(['arb_shader_objects-getuniform', '-auto'])
arb_shader_objects['getuniform'].runConcurrent = True
arb_shader_objects['bindattriblocation-scratch-name'] = concurrent_test('arb_shader_objects-bindattriblocation-scratch-name')
arb_shader_objects['getuniformlocation-array-of-struct-of-array'] = concurrent_test('arb_shader_objects-getuniformlocation-array-of-struct-of-array')
arb_shader_objects['clear-with-deleted'] = concurrent_test('arb_shader_objects-clear-with-deleted')
arb_shader_objects['delete-repeat'] = concurrent_test('arb_shader_objects-delete-repeat')

# Group ARB_explicit_attrib_location
arb_explicit_attrib_location = Group()
spec['ARB_explicit_attrib_location'] = arb_explicit_attrib_location
import_glsl_parser_tests(arb_explicit_attrib_location,
			 os.path.join(testsDir,
			 'spec', 'arb_explicit_attrib_location'),
			 [''])
add_plain_test(arb_explicit_attrib_location, 'glsl-explicit-location-01')
add_plain_test(arb_explicit_attrib_location, 'glsl-explicit-location-02')
add_plain_test(arb_explicit_attrib_location, 'glsl-explicit-location-03')
add_plain_test(arb_explicit_attrib_location, 'glsl-explicit-location-04')
add_plain_test(arb_explicit_attrib_location, 'glsl-explicit-location-05')


arb_texture_rectangle = Group()
spec['ARB_texture_rectangle'] = arb_texture_rectangle
add_texwrap_test1(arb_texture_rectangle, 'RECT')
add_texwrap_test2(arb_texture_rectangle, 'RECT', 'proj')
add_shader_test_dir(arb_texture_rectangle,
                    testsDir + '/spec/arb_texture_rectangle',
                    recursive=True)

arb_texture_storage = Group()
spec['ARB_texture_storage'] = arb_texture_storage
arb_texture_storage['texture-storage'] = plain_test('arb_texture_storage-texture-storage')

tdfx_texture_compression_fxt1 = Group()
spec['3DFX_texture_compression_FXT1'] = tdfx_texture_compression_fxt1
add_concurrent_test(tdfx_texture_compression_fxt1, 'compressedteximage GL_COMPRESSED_RGB_FXT1_3DFX')
add_concurrent_test(tdfx_texture_compression_fxt1, 'compressedteximage GL_COMPRESSED_RGBA_FXT1_3DFX')
add_fbo_generatemipmap_extension(tdfx_texture_compression_fxt1, 'GL_3DFX_texture_compression_FXT1', 'fbo-generatemipmap-formats')
tdfx_texture_compression_fxt1['invalid formats'] = PlainExecTest(['arb_texture_compression-invalid-formats', 'fxt1'])
tdfx_texture_compression_fxt1['invalid formats'].runConcurrent = True

def add_color_buffer_float_test(name, format, p1, p2):
	arb_color_buffer_float[format + '-' + name + ('-' + p1 if len(p1) else '') + ('-' + p2 if len(p2) else '')] = PlainExecTest(['arb_color_buffer_float-' + name, format, p1, p2])

arb_color_buffer_float = Group()
spec['ARB_color_buffer_float'] = arb_color_buffer_float
add_color_buffer_float_test('mrt', 'mixed', '', '')

add_color_buffer_float_test('getteximage', 'GL_RGBA8', '', '')
add_color_buffer_float_test('queries', 'GL_RGBA8', '', '')
add_color_buffer_float_test('readpixels', 'GL_RGBA8', '', '')
add_color_buffer_float_test('probepixel', 'GL_RGBA8', '', '')
add_color_buffer_float_test('drawpixels', 'GL_RGBA8', '', '')
add_color_buffer_float_test('clear', 'GL_RGBA8', '', '')
add_color_buffer_float_test('render', 'GL_RGBA8', '', '')
add_color_buffer_float_test('render', 'GL_RGBA8', 'fog', '')
add_color_buffer_float_test('render', 'GL_RGBA8', 'sanity', '')
add_color_buffer_float_test('render', 'GL_RGBA8', 'sanity', 'fog')

add_color_buffer_float_test('getteximage', 'GL_RGBA8_SNORM', '', '')
add_color_buffer_float_test('queries', 'GL_RGBA8_SNORM', '', '')
add_color_buffer_float_test('readpixels', 'GL_RGBA8_SNORM', '', '')
add_color_buffer_float_test('probepixel', 'GL_RGBA8_SNORM', '', '')
add_color_buffer_float_test('drawpixels', 'GL_RGBA8_SNORM', '', '')
add_color_buffer_float_test('clear', 'GL_RGBA8_SNORM', '', '')
add_color_buffer_float_test('render', 'GL_RGBA8_SNORM', '', '')
add_color_buffer_float_test('render', 'GL_RGBA8_SNORM', 'fog', '')
add_color_buffer_float_test('render', 'GL_RGBA8_SNORM', 'sanity', '')
add_color_buffer_float_test('render', 'GL_RGBA8_SNORM', 'sanity', 'fog')

add_color_buffer_float_test('getteximage', 'GL_RGBA16F', '', '')
add_color_buffer_float_test('queries', 'GL_RGBA16F', '', '')
add_color_buffer_float_test('readpixels', 'GL_RGBA16F', '', '')
add_color_buffer_float_test('probepixel', 'GL_RGBA16F', '', '')
add_color_buffer_float_test('drawpixels', 'GL_RGBA16F', '', '')
add_color_buffer_float_test('clear', 'GL_RGBA16F', '', '')
add_color_buffer_float_test('render', 'GL_RGBA16F', '', '')
add_color_buffer_float_test('render', 'GL_RGBA16F', 'fog', '')
add_color_buffer_float_test('render', 'GL_RGBA16F', 'sanity', '')
add_color_buffer_float_test('render', 'GL_RGBA16F', 'sanity', 'fog')

add_color_buffer_float_test('getteximage', 'GL_RGBA32F', '', '')
add_color_buffer_float_test('queries', 'GL_RGBA32F', '', '')
add_color_buffer_float_test('readpixels', 'GL_RGBA32F', '', '')
add_color_buffer_float_test('probepixel', 'GL_RGBA32F', '', '')
add_color_buffer_float_test('drawpixels', 'GL_RGBA32F', '', '')
add_color_buffer_float_test('clear', 'GL_RGBA32F', '', '')
add_color_buffer_float_test('render', 'GL_RGBA32F', '', '')
add_color_buffer_float_test('render', 'GL_RGBA32F', 'fog', '')
add_color_buffer_float_test('render', 'GL_RGBA32F', 'sanity', '')
add_color_buffer_float_test('render', 'GL_RGBA32F', 'sanity', 'fog')


arb_depth_texture = Group()
spec['ARB_depth_texture'] = arb_depth_texture
add_fbo_generatemipmap_extension(arb_depth_texture, 'GL_ARB_depth_texture', 'fbo-generatemipmap-formats')
add_fbo_clear_extension(arb_depth_texture, 'GL_ARB_depth_texture', 'fbo-clear-formats')
add_texwrap_test2(arb_depth_texture, '2D', 'GL_DEPTH_COMPONENT16')
add_texwrap_test2(arb_depth_texture, '2D', 'GL_DEPTH_COMPONENT24')
add_texwrap_test2(arb_depth_texture, '2D', 'GL_DEPTH_COMPONENT32')
add_fbo_depth_tests(arb_depth_texture, 'GL_DEPTH_COMPONENT16')
add_fbo_depth_tests(arb_depth_texture, 'GL_DEPTH_COMPONENT24')
add_fbo_depth_tests(arb_depth_texture, 'GL_DEPTH_COMPONENT32')

arb_depth_buffer_float = Group()
spec['ARB_depth_buffer_float'] = arb_depth_buffer_float
add_fbo_generatemipmap_extension(arb_depth_buffer_float, 'GL_ARB_depth_buffer_float', 'fbo-generatemipmap-formats')
add_fbo_depth_tests(arb_depth_buffer_float, 'GL_DEPTH_COMPONENT32F')
add_fbo_depth_tests(arb_depth_buffer_float, 'GL_DEPTH32F_STENCIL8')
add_fbo_stencil_tests(arb_depth_buffer_float, 'GL_DEPTH32F_STENCIL8')
add_fbo_depthstencil_tests(arb_depth_buffer_float, 'GL_DEPTH32F_STENCIL8')
add_fbo_clear_extension(arb_depth_buffer_float, 'GL_ARB_depth_buffer_float', 'fbo-clear-formats')
add_texwrap_test2(arb_depth_buffer_float, '2D', 'GL_DEPTH_COMPONENT32F')
add_texwrap_test2(arb_depth_buffer_float, '2D', 'GL_DEPTH32F_STENCIL8')

arb_texture_compression = Group()
spec['ARB_texture_compression'] = arb_texture_compression
add_fbo_generatemipmap_extension(arb_texture_compression, 'GL_ARB_texture_compression', 'fbo-generatemipmap-formats')
add_texwrap_test2(arb_texture_compression, '2D', 'GL_COMPRESSED_ALPHA')
add_texwrap_test2(arb_texture_compression, '2D', 'GL_COMPRESSED_LUMINANCE')
add_texwrap_test2(arb_texture_compression, '2D', 'GL_COMPRESSED_LUMINANCE_ALPHA')
add_texwrap_test2(arb_texture_compression, '2D', 'GL_COMPRESSED_INTENSITY')
add_texwrap_test2(arb_texture_compression, '2D', 'GL_COMPRESSED_RGB')
add_texwrap_test2(arb_texture_compression, '2D', 'GL_COMPRESSED_RGBA')
arb_texture_compression['GL_TEXTURE_INTERNAL_FORMAT query'] = PlainExecTest(['arb_texture_compression-internal-format-query', '-auto'])
arb_texture_compression['GL_TEXTURE_INTERNAL_FORMAT query'].runConcurrent = True
arb_texture_compression['unknown formats'] = PlainExecTest(['arb_texture_compression-invalid-formats', 'unknown'])
arb_texture_compression['unknown formats'].runConcurrent = True

arb_texture_compression_bptc = Group()
spec['ARB_texture_compression_bptc'] = arb_texture_compression_bptc
arb_texture_compression_bptc['invalid formats'] = PlainExecTest(['arb_texture_compression-invalid-formats', 'bptc'])
arb_texture_compression_bptc['invalid formats'].runConcurrent = True

arb_vertex_buffer_object = Group()
spec['ARB_vertex_buffer_object'] = arb_vertex_buffer_object
arb_vertex_buffer_object['elements-negative-offset'] = PlainExecTest(['arb_vertex_buffer_object-elements-negative-offset', '-auto'])
arb_vertex_buffer_object['mixed-immediate-and-vbo'] = PlainExecTest(['arb_vertex_buffer_object-mixed-immediate-and-vbo', '-auto'])

arb_vertex_program = Group()
spec['ARB_vertex_program'] = arb_vertex_program
arb_vertex_program['getenv4d-with-error'] = PlainExecTest(['arb_vertex_program-getenv4d-with-error', '-auto'])
arb_vertex_program['getlocal4d-with-error'] = PlainExecTest(['arb_vertex_program-getlocal4d-with-error', '-auto'])
arb_vertex_program['clip-plane-transformation arb'] = concurrent_test('clip-plane-transformation arb')
arb_vertex_program['minmax'] = concurrent_test('arb_vertex_program-minmax')

ext_framebuffer_multisample = Group()
spec['EXT_framebuffer_multisample'] = ext_framebuffer_multisample
ext_framebuffer_multisample['dlist'] = concurrent_test('ext_framebuffer_multisample-dlist')
ext_framebuffer_multisample['minmax'] = concurrent_test('ext_framebuffer_multisample-minmax')
ext_framebuffer_multisample['negative-copypixels'] = concurrent_test('ext_framebuffer_multisample-negative-copypixels')
ext_framebuffer_multisample['negative-copyteximage'] = concurrent_test('ext_framebuffer_multisample-negative-copyteximage')
ext_framebuffer_multisample['negative-max-samples'] = concurrent_test('ext_framebuffer_multisample-negative-max-samples')
ext_framebuffer_multisample['negative-mismatched-samples'] = concurrent_test('ext_framebuffer_multisample-negative-mismatched-samples')
ext_framebuffer_multisample['negative-readpixels'] = concurrent_test('ext_framebuffer_multisample-negative-readpixels')
ext_framebuffer_multisample['renderbufferstorage-samples'] = concurrent_test('ext_framebuffer_multisample-renderbufferstorage-samples')
ext_framebuffer_multisample['renderbuffer-samples'] = concurrent_test('ext_framebuffer_multisample-renderbuffer-samples')
ext_framebuffer_multisample['samples'] = concurrent_test('ext_framebuffer_multisample-samples')

ext_framebuffer_object = Group()
spec['EXT_framebuffer_object'] = ext_framebuffer_object
add_fbo_stencil_tests(ext_framebuffer_object, 'GL_STENCIL_INDEX1')
add_fbo_stencil_tests(ext_framebuffer_object, 'GL_STENCIL_INDEX4')
add_fbo_stencil_tests(ext_framebuffer_object, 'GL_STENCIL_INDEX8')
add_fbo_stencil_tests(ext_framebuffer_object, 'GL_STENCIL_INDEX16')
add_concurrent_test(ext_framebuffer_object, 'fbo-generatemipmap-noimage')


ext_packed_depth_stencil = Group()
spec['EXT_packed_depth_stencil'] = ext_packed_depth_stencil
add_fbo_depth_tests(ext_packed_depth_stencil, 'GL_DEPTH24_STENCIL8')
add_fbo_stencil_tests(ext_packed_depth_stencil, 'GL_DEPTH24_STENCIL8')
add_fbo_depthstencil_tests(ext_packed_depth_stencil, 'GL_DEPTH24_STENCIL8')
add_fbo_generatemipmap_extension(ext_packed_depth_stencil, 'GL_EXT_packed_depth_stencil', 'fbo-generatemipmap-formats')
add_fbo_clear_extension(ext_packed_depth_stencil, 'GL_EXT_packed_depth_stencil', 'fbo-clear-formats')
add_texwrap_test2(ext_packed_depth_stencil, '2D', 'GL_DEPTH24_STENCIL8')
ext_packed_depth_stencil['readpixels-24_8'] = PlainExecTest(['ext_packed_depth_stencil-readpixels-24_8', '-auto'])

ext_texture_array = Group()
spec['EXT_texture_array'] = ext_texture_array
add_plain_test(ext_texture_array, 'fbo-generatemipmap-array')
spec['EXT_texture_array']['maxlayers'] = concurrent_test('ext_texture_array-maxlayers')
add_shader_test_dir(ext_texture_array,
                    testsDir + '/spec/ext_texture_array',
                    recursive=True)

ext_texture_compression_latc = Group()
spec['EXT_texture_compression_latc'] = ext_texture_compression_latc
add_fbo_generatemipmap_extension(ext_texture_compression_latc, 'GL_EXT_texture_compression_latc', 'fbo-generatemipmap-formats')
add_fbo_generatemipmap_extension(ext_texture_compression_latc, 'GL_EXT_texture_compression_latc-signed', 'fbo-generatemipmap-formats-signed')
add_texwrap_test2(ext_texture_compression_latc, '2D', 'GL_COMPRESSED_LUMINANCE_LATC1')
add_texwrap_test2(ext_texture_compression_latc, '2D', 'GL_COMPRESSED_SIGNED_LUMINANCE_LATC1')
add_texwrap_test2(ext_texture_compression_latc, '2D', 'GL_COMPRESSED_LUMINANCE_ALPHA_LATC2')
add_texwrap_test2(ext_texture_compression_latc, '2D', 'GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2')
ext_texture_compression_latc['invalid formats'] = PlainExecTest(['arb_texture_compression-invalid-formats', 'latc'])
ext_texture_compression_latc['invalid formats'].runConcurrent = True

ext_texture_compression_rgtc = Group()
spec['EXT_texture_compression_rgtc'] = ext_texture_compression_rgtc
add_concurrent_test(ext_texture_compression_rgtc, 'compressedteximage GL_COMPRESSED_RED_RGTC1_EXT')
add_concurrent_test(ext_texture_compression_rgtc, 'compressedteximage GL_COMPRESSED_RED_GREEN_RGTC2_EXT')
add_concurrent_test(ext_texture_compression_rgtc, 'compressedteximage GL_COMPRESSED_SIGNED_RED_RGTC1_EXT')
add_concurrent_test(ext_texture_compression_rgtc, 'compressedteximage GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT')
add_fbo_generatemipmap_extension(ext_texture_compression_rgtc, 'GL_EXT_texture_compression_rgtc', 'fbo-generatemipmap-formats')
add_fbo_generatemipmap_extension(ext_texture_compression_rgtc, 'GL_EXT_texture_compression_rgtc-signed', 'fbo-generatemipmap-formats-signed')
add_texwrap_test2(ext_texture_compression_rgtc, '2D', 'GL_COMPRESSED_RED_RGTC1')
add_texwrap_test2(ext_texture_compression_rgtc, '2D', 'GL_COMPRESSED_SIGNED_RED_RGTC1')
add_texwrap_test2(ext_texture_compression_rgtc, '2D', 'GL_COMPRESSED_RG_RGTC2')
add_texwrap_test2(ext_texture_compression_rgtc, '2D', 'GL_COMPRESSED_SIGNED_RG_RGTC2')
ext_texture_compression_rgtc['invalid formats'] = PlainExecTest(['arb_texture_compression-invalid-formats', 'rgtc'])
ext_texture_compression_rgtc['invalid formats'].runConcurrent = True

ext_texture_compression_s3tc = Group()
spec['EXT_texture_compression_s3tc'] = ext_texture_compression_s3tc
add_concurrent_test(ext_texture_compression_s3tc, 'compressedteximage GL_COMPRESSED_RGB_S3TC_DXT1_EXT')
add_concurrent_test(ext_texture_compression_s3tc, 'compressedteximage GL_COMPRESSED_RGBA_S3TC_DXT1_EXT')
add_concurrent_test(ext_texture_compression_s3tc, 'compressedteximage GL_COMPRESSED_RGBA_S3TC_DXT3_EXT')
add_concurrent_test(ext_texture_compression_s3tc, 'compressedteximage GL_COMPRESSED_RGBA_S3TC_DXT5_EXT')
add_fbo_generatemipmap_extension(ext_texture_compression_s3tc, 'GL_EXT_texture_compression_s3tc', 'fbo-generatemipmap-formats')
add_texwrap_test2(ext_texture_compression_s3tc, '2D', 'GL_COMPRESSED_RGB_S3TC_DXT1')
add_texwrap_test2(ext_texture_compression_s3tc, '2D', 'GL_COMPRESSED_RGBA_S3TC_DXT1')
add_texwrap_test2(ext_texture_compression_s3tc, '2D', 'GL_COMPRESSED_RGBA_S3TC_DXT3')
add_texwrap_test2(ext_texture_compression_s3tc, '2D', 'GL_COMPRESSED_RGBA_S3TC_DXT5')
ext_texture_compression_s3tc['invalid formats'] = PlainExecTest(['arb_texture_compression-invalid-formats', 's3tc'])
ext_texture_compression_s3tc['invalid formats'].runConcurrent = True

ati_texture_compression_3dc = Group()
spec['ATI_texture_compression_3dc'] = ati_texture_compression_3dc
add_fbo_generatemipmap_extension(ati_texture_compression_3dc, 'GL_ATI_texture_compression_3dc', 'fbo-generatemipmap-formats')
add_texwrap_test2(ati_texture_compression_3dc, '2D', 'GL_COMPRESSED_LUMINANCE_ALPHA_3DC')
ati_texture_compression_3dc['invalid formats'] = PlainExecTest(['arb_texture_compression-invalid-formats', '3dc'])
ati_texture_compression_3dc['invalid formats'].runConcurrent = True

ext_packed_float = Group()
spec['EXT_packed_float'] = ext_packed_float
add_fbo_generatemipmap_extension(ext_packed_float, 'GL_EXT_packed_float', 'fbo-generatemipmap-formats')
add_fbo_clear_extension(ext_packed_float, 'GL_EXT_packed_float', 'fbo-clear-formats')
add_fbo_blending_extension(ext_packed_float, 'GL_EXT_packed_float', 'fbo-blending-formats')
add_fbo_alphatest_extension(ext_packed_float, 'GL_EXT_packed_float', 'fbo-alphatest-formats')
add_texwrap_test2(ext_packed_float, '2D', 'GL_R11F_G11F_B10F')
ext_packed_float['pack'] = concurrent_test('ext_packed_float-pack')
ext_packed_float['getteximage-invalid-format-for-packed-type'] = concurrent_test('getteximage-invalid-format-for-packed-type')

arb_texture_float = Group()
spec['ARB_texture_float'] = arb_texture_float
add_fbo_generatemipmap_extension(arb_texture_float, 'GL_ARB_texture_float', 'fbo-generatemipmap-formats')
add_fbo_clear_extension(arb_texture_float, 'GL_ARB_texture_float', 'fbo-clear-formats')
add_fbo_blending_extension(arb_texture_float, 'GL_ARB_texture_float', 'fbo-blending-formats')
add_fbo_alphatest_extension(arb_texture_float, 'GL_ARB_texture_float', 'fbo-alphatest-formats')
add_texwrap_test2(arb_texture_float, '2D', 'GL_ALPHA16F')
add_texwrap_test2(arb_texture_float, '2D', 'GL_LUMINANCE16F')
add_texwrap_test2(arb_texture_float, '2D', 'GL_LUMINANCE_ALPHA16F')
add_texwrap_test2(arb_texture_float, '2D', 'GL_INTENSITY16F')
add_texwrap_test2(arb_texture_float, '2D', 'GL_RGB16F')
add_texwrap_test2(arb_texture_float, '2D', 'GL_RGBA16F')
add_texwrap_test2(arb_texture_float, '2D', 'GL_ALPHA32F')
add_texwrap_test2(arb_texture_float, '2D', 'GL_LUMINANCE32F')
add_texwrap_test2(arb_texture_float, '2D', 'GL_LUMINANCE_ALPHA32F')
add_texwrap_test2(arb_texture_float, '2D', 'GL_INTENSITY32F')
add_texwrap_test2(arb_texture_float, '2D', 'GL_RGB32F')
add_texwrap_test2(arb_texture_float, '2D', 'GL_RGBA32F')
add_plain_test(arb_texture_float, 'arb_texture_float-texture-float-formats')

ext_texture_integer = Group()
spec['EXT_texture_integer'] = ext_texture_integer
# unsupported for int yet
#add_fbo_clear_extension(ext_texture_integer, 'GL_EXT_texture_integer', 'fbo-clear-formats')
ext_texture_integer['api-drawpixels'] = concurrent_test('ext_texture_integer-api-drawpixels')
ext_texture_integer['api-teximage'] = concurrent_test('ext_texture_integer-api-teximage')
ext_texture_integer['api-readpixels'] = concurrent_test('ext_texture_integer-api-readpixels')
ext_texture_integer['fbo-blending'] = concurrent_test('ext_texture_integer-fbo-blending')
ext_texture_integer['fbo-blending GL_ARB_texture_rg'] = concurrent_test('ext_texture_integer-fbo-blending GL_ARB_texture_rg')
ext_texture_integer['fbo_integer_precision_clear'] = plain_test('ext_texture_integer-fbo_integer_precision_clear')
ext_texture_integer['fbo_integer_readpixels_sint_uint'] = plain_test('ext_texture_integer-fbo_integer_readpixels_sint_uint')
ext_texture_integer['getteximage-clamping'] = concurrent_test('ext_texture_integer-getteximage-clamping')
ext_texture_integer['getteximage-clamping GL_ARB_texture_rg'] = concurrent_test('ext_texture_integer-getteximage-clamping GL_ARB_texture_rg')
ext_texture_integer['texture_integer_glsl130'] = concurrent_test('ext_texture_integer-texture_integer_glsl130')

arb_texture_rg = Group()
spec['ARB_texture_rg'] = arb_texture_rg
add_shader_test_dir(arb_texture_rg,
                    testsDir + '/spec/arb_texture_rg/execution',
                    recursive=True)
add_fbo_generatemipmap_extension(arb_texture_rg, 'GL_ARB_texture_rg', 'fbo-generatemipmap-formats')
add_fbo_generatemipmap_extension(arb_texture_rg, 'GL_ARB_texture_rg-float', 'fbo-generatemipmap-formats-float')
add_fbo_clear_extension(arb_texture_rg, 'GL_ARB_texture_rg', 'fbo-clear-formats')
# unsupported for int yet
#add_fbo_clear_extension(arb_texture_rg, 'GL_ARB_texture_rg-int', 'fbo-clear-formats-int')
add_fbo_clear_extension(arb_texture_rg, 'GL_ARB_texture_rg-float', 'fbo-clear-formats-float')
add_fbo_blending_extension(arb_texture_rg, 'GL_ARB_texture_rg', 'fbo-blending-formats')
add_fbo_blending_extension(arb_texture_rg, 'GL_ARB_texture_rg-float', 'fbo-blending-formats-float')
add_fbo_alphatest_extension(arb_texture_rg, 'GL_ARB_texture_rg', 'fbo-alphatest-formats')
add_fbo_alphatest_extension(arb_texture_rg, 'GL_ARB_texture_rg-float', 'fbo-alphatest-formats-float')
add_texwrap_test2(arb_texture_rg, '2D', 'GL_R8')
add_texwrap_test2(arb_texture_rg, '2D', 'GL_RG8')
add_texwrap_test2(arb_texture_rg, '2D', 'GL_R16')
add_texwrap_test2(arb_texture_rg, '2D', 'GL_RG16')
add_texwrap_test2(arb_texture_rg, '2D', 'GL_R16F')
add_texwrap_test2(arb_texture_rg, '2D', 'GL_RG16F')
add_texwrap_test2(arb_texture_rg, '2D', 'GL_R32F')
add_texwrap_test2(arb_texture_rg, '2D', 'GL_RG32F')

ext_texture_rgb10_a2ui = Group()
spec['EXT_texture_rgb10_a2ui'] = ext_texture_rgb10_a2ui
ext_texture_rgb10_a2ui['fbo-blending'] = concurrent_test('ext_texture_integer-fbo-blending GL_ARB_texture_rgb10_a2ui')

ext_texture_shared_exponent = Group()
spec['EXT_texture_shared_exponent'] = ext_texture_shared_exponent
add_fbo_generatemipmap_extension(ext_texture_shared_exponent, 'GL_EXT_texture_shared_exponent', 'fbo-generatemipmap-formats')
add_fbo_clear_extension(ext_texture_shared_exponent, 'GL_EXT_texture_shared_exponent', 'fbo-clear-formats')
add_fbo_blending_extension(ext_texture_shared_exponent, 'GL_EXT_texture_shared_exponent', 'fbo-blending-formats')
add_fbo_alphatest_extension(ext_texture_shared_exponent, 'GL_EXT_texture_shared_exponent', 'fbo-alphatest-formats')
add_texwrap_test2(ext_texture_shared_exponent, '2D', 'GL_RGB9_E5')

ext_texture_snorm = Group()
spec['EXT_texture_snorm'] = ext_texture_snorm
add_fbo_generatemipmap_extension(ext_texture_snorm, 'GL_EXT_texture_snorm', 'fbo-generatemipmap-formats')
add_fbo_clear_extension(ext_texture_snorm, 'GL_EXT_texture_snorm', 'fbo-clear-formats')
add_fbo_blending_extension(ext_texture_snorm, 'GL_EXT_texture_snorm', 'fbo-blending-formats')
add_fbo_alphatest_extension(ext_texture_snorm, 'GL_EXT_texture_snorm', 'fbo-alphatest-formats')
add_texwrap_test2(ext_texture_snorm, '2D', 'GL_R8_SNORM')
add_texwrap_test2(ext_texture_snorm, '2D', 'GL_RG8_SNORM')
add_texwrap_test2(ext_texture_snorm, '2D', 'GL_RGB8_SNORM')
add_texwrap_test2(ext_texture_snorm, '2D', 'GL_RGBA8_SNORM')
add_texwrap_test2(ext_texture_snorm, '2D', 'GL_R16_SNORM')
add_texwrap_test2(ext_texture_snorm, '2D', 'GL_RG16_SNORM')
add_texwrap_test2(ext_texture_snorm, '2D', 'GL_RGB16_SNORM')
add_texwrap_test2(ext_texture_snorm, '2D', 'GL_RGBA16_SNORM')
add_texwrap_test2(ext_texture_snorm, '2D', 'GL_ALPHA8_SNORM')
add_texwrap_test2(ext_texture_snorm, '2D', 'GL_LUMINANCE8_SNORM')
add_texwrap_test2(ext_texture_snorm, '2D', 'GL_LUMINANCE8_ALPHA8_SNORM')
add_texwrap_test2(ext_texture_snorm, '2D', 'GL_INTENSITY8_SNORM')
add_texwrap_test2(ext_texture_snorm, '2D', 'GL_ALPHA16_SNORM')
add_texwrap_test2(ext_texture_snorm, '2D', 'GL_LUMINANCE16_SNORM')
add_texwrap_test2(ext_texture_snorm, '2D', 'GL_LUMINANCE16_ALPHA16_SNORM')
add_texwrap_test2(ext_texture_snorm, '2D', 'GL_INTENSITY16_SNORM')

ext_texture_srgb = Group()
spec['EXT_texture_sRGB'] = ext_texture_srgb
add_concurrent_test(ext_texture_compression_s3tc, 'compressedteximage GL_COMPRESSED_SRGB_S3TC_DXT1_EXT')
add_concurrent_test(ext_texture_compression_s3tc, 'compressedteximage GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT')
add_concurrent_test(ext_texture_compression_s3tc, 'compressedteximage GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT')
add_concurrent_test(ext_texture_compression_s3tc, 'compressedteximage GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT')
add_fbo_generatemipmap_extension(ext_texture_srgb, 'GL_EXT_texture_sRGB', 'fbo-generatemipmap-formats')
# TODO: also use GL_ARB_framebuffer_sRGB:
#add_fbo_blending_extension(ext_texture_srgb, 'GL_EXT_texture_sRGB', 'fbo-blending-formats')
add_fbo_alphatest_extension(ext_texture_srgb, 'GL_EXT_texture_sRGB', 'fbo-alphatest-formats')
add_fbo_generatemipmap_extension(ext_texture_srgb, 'GL_EXT_texture_sRGB-s3tc', 'fbo-generatemipmap-formats-s3tc')
ext_texture_srgb['invalid formats'] = PlainExecTest(['arb_texture_compression-invalid-formats', 'srgb'])
ext_texture_srgb['invalid formats'].runConcurrent = True

ext_timer_query = Group()
spec['EXT_timer_query'] = ext_timer_query
ext_timer_query['time-elapsed'] = concurrent_test('ext_timer_query-time-elapsed')

ext_transform_feedback = Group()
spec['EXT_transform_feedback'] = ext_transform_feedback
for mode in ['interleaved_ok_base', 'interleaved_ok_range',
             'interleaved_ok_offset', 'interleaved_unbound',
             'interleaved_no_varyings', 'separate_ok_1',
             'separate_unbound_0_1', 'separate_ok_2', 'separate_unbound_0_2',
             'separate_unbound_1_2', 'separate_no_varyings', 'no_prog_active',
             'begin_active', 'useprog_active', 'link_current_active',
             'link_other_active', 'bind_base_active', 'bind_range_active',
             'bind_offset_active', 'end_inactive', 'bind_base_max',
             'bind_range_max', 'bind_offset_max', 'bind_range_size_m4',
             'bind_range_size_0', 'bind_range_size_1', 'bind_range_size_2',
             'bind_range_size_3', 'bind_range_size_5', 'bind_range_offset_1',
             'bind_range_offset_2', 'bind_range_offset_3',
             'bind_range_offset_5', 'bind_offset_offset_1',
             'bind_offset_offset_2', 'bind_offset_offset_3',
             'bind_offset_offset_5', 'not_a_program']:
        test_name = 'api-errors {0}'.format(mode)
        ext_transform_feedback[test_name] = concurrent_test(
                'ext_transform_feedback-{0}'.format(test_name))
for varying in ['gl_Color', 'gl_SecondaryColor', 'gl_TexCoord',
                'gl_FogFragCoord', 'gl_Position', 'gl_PointSize',
                'gl_ClipVertex', 'gl_ClipDistance',
                'gl_ClipDistance[1]-no-subscript',
                'gl_ClipDistance[2]-no-subscript',
                'gl_ClipDistance[3]-no-subscript',
                'gl_ClipDistance[4]-no-subscript',
                'gl_ClipDistance[5]-no-subscript',
                'gl_ClipDistance[6]-no-subscript',
                'gl_ClipDistance[7]-no-subscript',
                'gl_ClipDistance[8]-no-subscript']:
        test_name = 'builtin-varyings {0}'.format(varying)
        ext_transform_feedback[test_name] = concurrent_test(
                'ext_transform_feedback-{0}'.format(test_name))
ext_transform_feedback['buffer-usage'] = concurrent_test('ext_transform_feedback-buffer-usage')
ext_transform_feedback['discard-api'] = concurrent_test('ext_transform_feedback-discard-api')
ext_transform_feedback['discard-bitmap'] = concurrent_test('ext_transform_feedback-discard-bitmap')
ext_transform_feedback['discard-clear'] = concurrent_test('ext_transform_feedback-discard-clear')
ext_transform_feedback['discard-copypixels'] = concurrent_test('ext_transform_feedback-discard-copypixels')
ext_transform_feedback['discard-drawarrays'] = concurrent_test('ext_transform_feedback-discard-drawarrays')
ext_transform_feedback['discard-drawpixels'] = concurrent_test('ext_transform_feedback-discard-drawpixels')
for mode in ['main_binding', 'indexed_binding', 'buffer_start', 'buffer_size']:
        test_name = 'get-buffer-state {0}'.format(mode)
        ext_transform_feedback[test_name] = concurrent_test(
                'ext_transform_feedback-{0}'.format(test_name))
ext_transform_feedback['immediate-reuse'] = concurrent_test('ext_transform_feedback-immediate-reuse')
for mode in ['output', 'prims_generated', 'prims_written']:
        test_name = 'intervening-read {0}'.format(mode)
        ext_transform_feedback[test_name] = concurrent_test(
                'ext_transform_feedback-{0}'.format(test_name))
ext_transform_feedback['max-varyings'] = concurrent_test('ext_transform_feedback-max-varyings')
ext_transform_feedback['overflow-edge-cases'] = concurrent_test('ext_transform_feedback-overflow-edge-cases')
ext_transform_feedback['position-readback-bufferbase'] = 		concurrent_test('ext_transform_feedback-position')
ext_transform_feedback['position-readback-bufferbase-discard'] = 	concurrent_test('ext_transform_feedback-position discard')
ext_transform_feedback['position-readback-bufferoffset'] = 		concurrent_test('ext_transform_feedback-position offset')
ext_transform_feedback['position-readback-bufferoffset-discard'] = 	concurrent_test('ext_transform_feedback-position offset discard')
ext_transform_feedback['position-readback-bufferrange'] = 		concurrent_test('ext_transform_feedback-position range')
ext_transform_feedback['position-readback-bufferrange-discard'] = 	concurrent_test('ext_transform_feedback-position range discard')

ext_transform_feedback['position-render-bufferbase'] = 			concurrent_test('ext_transform_feedback-position render')
ext_transform_feedback['position-render-bufferbase-discard'] = 		concurrent_test('ext_transform_feedback-position render discard')
ext_transform_feedback['position-render-bufferoffset'] = 		concurrent_test('ext_transform_feedback-position render offset')
ext_transform_feedback['position-render-bufferoffset-discard'] = 	concurrent_test('ext_transform_feedback-position render offset discard')
ext_transform_feedback['position-render-bufferrange'] = 		concurrent_test('ext_transform_feedback-position render range')
ext_transform_feedback['position-render-bufferrange-discard'] = 	concurrent_test('ext_transform_feedback-position render range discard')

ext_transform_feedback['query-primitives_generated-bufferbase'] = 		concurrent_test('ext_transform_feedback-position primgen')
ext_transform_feedback['query-primitives_generated-bufferbase-discard'] = 	concurrent_test('ext_transform_feedback-position primgen discard')
ext_transform_feedback['query-primitives_generated-bufferoffset'] = 		concurrent_test('ext_transform_feedback-position primgen offset')
ext_transform_feedback['query-primitives_generated-bufferoffset-discard'] = 	concurrent_test('ext_transform_feedback-position primgen offset discard')
ext_transform_feedback['query-primitives_generated-bufferrange'] = 		concurrent_test('ext_transform_feedback-position primgen range')
ext_transform_feedback['query-primitives_generated-bufferrange-discard'] = 	concurrent_test('ext_transform_feedback-position primgen range discard')

ext_transform_feedback['query-primitives_written-bufferbase'] = 		concurrent_test('ext_transform_feedback-position primwritten')
ext_transform_feedback['query-primitives_written-bufferbase-discard'] = 	concurrent_test('ext_transform_feedback-position primwritten discard')
ext_transform_feedback['query-primitives_written-bufferoffset'] = 		concurrent_test('ext_transform_feedback-position primwritten offset')
ext_transform_feedback['query-primitives_written-bufferoffset-discard'] = 	concurrent_test('ext_transform_feedback-position primwritten offset discard')
ext_transform_feedback['query-primitives_written-bufferrange'] = 		concurrent_test('ext_transform_feedback-position primwritten range')
ext_transform_feedback['query-primitives_written-bufferrange-discard'] = 	concurrent_test('ext_transform_feedback-position primwritten range discard')

ext_transform_feedback['interleaved-attribs'] = concurrent_test('ext_transform_feedback-interleaved')
ext_transform_feedback['separate-attribs'] = concurrent_test('ext_transform_feedback-separate')
for drawcall in ['arrays', 'elements']:
        for mode in ['triangles', 'lines', 'points']:
                test_name = 'order {0} {1}'.format(drawcall, mode)
                ext_transform_feedback[test_name] = concurrent_test(
                        'ext_transform_feedback-{0}'.format(test_name))
for draw_mode in ['points', 'lines', 'line_loop', 'line_strip',
                  'triangles', 'triangle_strip', 'triangle_fan',
                  'quads', 'quad_strip', 'polygon']:
        for shade_mode in ['monochrome', 'smooth', 'flat_first', 'flat_last', 'wireframe']:
                if shade_mode == 'wireframe' and \
                            draw_mode in ['points', 'lines', 'line_loop', 'line_strip']:
                        continue
                test_name = 'tessellation {0} {1}'.format(
                        draw_mode, shade_mode)
                ext_transform_feedback[test_name] = concurrent_test(
                        'ext_transform_feedback-{0}'.format(test_name))
for alignment in [0, 4, 8, 12]:
        test_name = 'alignment {0}'.format(alignment)
        ext_transform_feedback[test_name] = concurrent_test(
                'ext_transform_feedback-{0}'.format(test_name))

for output_type in ['float', 'vec2', 'vec3', 'vec4', 'mat2', 'mat2x3',
                    'mat2x4', 'mat3x2', 'mat3', 'mat3x4', 'mat4x2', 'mat4x3',
                    'mat4', 'int', 'ivec2', 'ivec3', 'ivec4', 'uint', 'uvec2',
                    'uvec3', 'uvec4']:
        for suffix in ['', '[2]', '[2]-no-subscript']:
                test_name = 'output-type {0}{1}'.format(output_type, suffix)
                ext_transform_feedback[test_name] = concurrent_test(
                        'ext_transform_feedback-{0}'.format(test_name))

for mode in ['discard', 'buffer', 'prims_generated', 'prims_written']:
        test_name = 'generatemipmap {0}'.format(mode)
        ext_transform_feedback[test_name] = concurrent_test(
                'ext_transform_feedback-{0}'.format(test_name))

arb_transform_feedback2 = Group()
spec['ARB_transform_feedback2'] = arb_transform_feedback2
arb_transform_feedback2['draw-auto'] = PlainExecTest(['arb_transform_feedback2-draw-auto', '-auto'])

ati_draw_buffers = Group()
spec['ATI_draw_buffers'] = ati_draw_buffers
add_plain_test(ati_draw_buffers, 'ati_draw_buffers-arbfp')
ati_draw_buffers['arbfp-no-index'] = PlainExecTest(['ati_draw_buffers-arbfp-no-index', '-auto'])
ati_draw_buffers['arbfp-no-option'] = PlainExecTest(['ati_draw_buffers-arbfp-no-option', '-auto'])

ati_envmap_bumpmap = Group()
spec['ATI_envmap_bumpmap'] = ati_envmap_bumpmap
add_plain_test(ati_envmap_bumpmap, 'ati_envmap_bumpmap-bump')

arb_instanced_arrays = Group()
spec['ARB_instanced_arrays'] = arb_instanced_arrays
add_plain_test(arb_instanced_arrays, 'instanced_arrays')

arb_map_buffer_range = Group()
spec['ARB_map_buffer_range'] = arb_map_buffer_range
add_plain_test(arb_map_buffer_range, 'map_buffer_range_error_check')
add_plain_test(arb_map_buffer_range, 'map_buffer_range_test')

arb_multisample = Group()
spec['ARB_multisample'] = arb_multisample
arb_multisample['beginend'] = concurrent_test('arb_multisample-beginend')
arb_multisample['pushpop'] = concurrent_test('arb_multisample-pushpop')

arb_seamless_cube_map = Group()
spec['ARB_seamless_cube_map'] = arb_seamless_cube_map
add_plain_test(arb_seamless_cube_map, 'arb_seamless_cubemap')

amd_seamless_cubemap_per_texture = Group()
spec['AMD_seamless_cubemap_per_texture'] = amd_seamless_cubemap_per_texture
add_plain_test(amd_seamless_cubemap_per_texture, 'amd_seamless_cubemap_per_texture')

ext_fog_coord = Group()
spec['EXT_fog_coord'] = ext_fog_coord
add_plain_test(ext_fog_coord, 'ext_fog_coord-modes')

nv_texture_barrier = Group()
spec['NV_texture_barrier'] = nv_texture_barrier
add_plain_test(nv_texture_barrier, 'blending-in-shader')

nv_conditional_render = Group()
spec['NV_conditional_render'] = nv_conditional_render
nv_conditional_render['begin-while-active'] = concurrent_test('nv_conditional_render-begin-while-active')
nv_conditional_render['begin-zero'] = concurrent_test('nv_conditional_render-begin-zero')
nv_conditional_render['bitmap'] = PlainExecTest(['nv_conditional_render-bitmap', '-auto'])
nv_conditional_render['blitframebuffer'] = PlainExecTest(['nv_conditional_render-blitframebuffer', '-auto'])
nv_conditional_render['clear'] = PlainExecTest(['nv_conditional_render-clear', '-auto'])
nv_conditional_render['copypixels'] = PlainExecTest(['nv_conditional_render-copypixels', '-auto'])
nv_conditional_render['copyteximage'] = PlainExecTest(['nv_conditional_render-copyteximage', '-auto'])
nv_conditional_render['copytexsubimage'] = PlainExecTest(['nv_conditional_render-copytexsubimage', '-auto'])
nv_conditional_render['dlist'] = PlainExecTest(['nv_conditional_render-dlist', '-auto'])
nv_conditional_render['drawpixels'] = PlainExecTest(['nv_conditional_render-drawpixels', '-auto'])
nv_conditional_render['generatemipmap'] = PlainExecTest(['nv_conditional_render-generatemipmap', '-auto'])
nv_conditional_render['vertex_array'] = PlainExecTest(['nv_conditional_render-vertex_array', '-auto'])

oes_compressed_paletted_texture = Group()
spec['OES_compressed_paletted_texture'] = oes_compressed_paletted_texture
oes_compressed_paletted_texture['invalid formats'] = PlainExecTest(['arb_texture_compression-invalid-formats', 'paletted'])
oes_compressed_paletted_texture['invalid formats'].runConcurrent = True

arb_copy_buffer = Group()
spec['ARB_copy_buffer'] = arb_copy_buffer
add_plain_test(arb_copy_buffer, 'copy_buffer_coherency')
add_plain_test(arb_copy_buffer, 'copybuffersubdata')
arb_copy_buffer['dlist'] = concurrent_test('arb_copy_buffer-dlist')
arb_copy_buffer['get'] = concurrent_test('arb_copy_buffer-get')
arb_copy_buffer['negative-bound-zero'] = concurrent_test('arb_copy_buffer-negative-bound-zero')
arb_copy_buffer['negative-bounds'] = concurrent_test('arb_copy_buffer-negative-bounds')
arb_copy_buffer['negative-mapped'] = concurrent_test('arb_copy_buffer-negative-mapped')
arb_copy_buffer['overlap'] = concurrent_test('arb_copy_buffer-overlap')
arb_copy_buffer['targets'] = concurrent_test('arb_copy_buffer-targets')

arb_vertex_type_2_10_10_10_rev = Group()
spec['ARB_vertex_type_2_10_10_10_rev'] = arb_vertex_type_2_10_10_10_rev
add_plain_test(arb_vertex_type_2_10_10_10_rev, 'draw-vertices-2101010')

arb_draw_buffers = Group()
spec['ARB_draw_buffers'] = arb_draw_buffers
add_plain_test(arb_draw_buffers, 'arb_draw_buffers-state_change')

# group glslparsertest ------------------------------------------------------
glslparsertest = Group()
# Add all shader source files in the directories below.
for filename in os.listdir(testsDir + '/glslparsertest/shaders'):
	ext = filename.rsplit('.')[-1]
	if ext in ['vert', 'geo', 'frag']:
		add_glsl_parser_test(glslparsertest, path.join(testsDir, 'glslparsertest/shaders', filename), filename)
del glslparsertest['CorrectPreprocess11.frag']
for filename in os.listdir(testsDir + '/glslparsertest/glsl2'):
	ext = filename.rsplit('.')[-1]
	if ext in ['vert', 'geo', 'frag']:
		add_glsl_parser_test(glslparsertest, path.join(testsDir, 'glslparsertest/glsl2', filename), 'glsl2/' + filename)
# end group glslparsertest ---------------------------------------------------

hiz = Group()
add_plain_test(hiz, 'hiz-depth-stencil-test-fbo-d0-s8')
add_plain_test(hiz, 'hiz-depth-stencil-test-fbo-d24-s0')
add_plain_test(hiz, 'hiz-depth-stencil-test-fbo-d24-s8')
add_plain_test(hiz, 'hiz-depth-stencil-test-fbo-d24s8')
add_plain_test(hiz, 'hiz-depth-read-fbo-d24-s0')
add_plain_test(hiz, 'hiz-depth-read-fbo-d24-s8')
add_plain_test(hiz, 'hiz-depth-read-fbo-d24s8')
add_plain_test(hiz, 'hiz-depth-read-window-stencil0')
add_plain_test(hiz, 'hiz-depth-read-window-stencil1')
add_plain_test(hiz, 'hiz-depth-test-fbo-d24-s0')
add_plain_test(hiz, 'hiz-depth-test-fbo-d24-s8')
add_plain_test(hiz, 'hiz-depth-test-fbo-d24s8')
add_plain_test(hiz, 'hiz-depth-test-window-stencil0')
add_plain_test(hiz, 'hiz-depth-test-window-stencil1')
add_plain_test(hiz, 'hiz-stencil-read-fbo-d0-s8')
add_plain_test(hiz, 'hiz-stencil-read-fbo-d24-s8')
add_plain_test(hiz, 'hiz-stencil-read-fbo-d24s8')
add_plain_test(hiz, 'hiz-stencil-read-window-depth0')
add_plain_test(hiz, 'hiz-stencil-read-window-depth1')
add_plain_test(hiz, 'hiz-stencil-test-fbo-d0-s8')
add_plain_test(hiz, 'hiz-stencil-test-fbo-d24-s8')
add_plain_test(hiz, 'hiz-stencil-test-fbo-d24s8')
add_plain_test(hiz, 'hiz-stencil-test-window-depth0')
add_plain_test(hiz, 'hiz-stencil-test-window-depth1')

asmparsertest = Group()
def add_asmparsertest(group, shader):
	test = PlainExecTest(['asmparsertest', '-auto', group, testsDir + '/asmparsertest/shaders/' + group + '/' + shader])
	test.runConcurrent = True
	asmparsertest[group + '/' + shader] = test

add_asmparsertest('ARBfp1.0', 'abs-01.txt')
add_asmparsertest('ARBfp1.0', 'abs-02.txt')
add_asmparsertest('ARBfp1.0', 'abs-03.txt')
add_asmparsertest('ARBfp1.0', 'condition_code-01.txt')
add_asmparsertest('ARBfp1.0', 'cos-01.txt')
add_asmparsertest('ARBfp1.0', 'cos-02.txt')
add_asmparsertest('ARBfp1.0', 'cos-03.txt')
add_asmparsertest('ARBfp1.0', 'cos-04.txt')
add_asmparsertest('ARBfp1.0', 'cos-05.txt')
add_asmparsertest('ARBfp1.0', 'ddx-01.txt')
add_asmparsertest('ARBfp1.0', 'ddx-02.txt')
add_asmparsertest('ARBfp1.0', 'ddy-01.txt')
add_asmparsertest('ARBfp1.0', 'ddy-02.txt')
add_asmparsertest('ARBfp1.0', 'depth_range-01.txt')
add_asmparsertest('ARBfp1.0', 'fog-01.txt')
add_asmparsertest('ARBfp1.0', 'fog-02.txt')
add_asmparsertest('ARBfp1.0', 'fog-03.txt')
add_asmparsertest('ARBfp1.0', 'fog-04.txt')
add_asmparsertest('ARBfp1.0', 'option-01.txt')
add_asmparsertest('ARBfp1.0', 'precision_hint-01.txt')
add_asmparsertest('ARBfp1.0', 'precision_hint-02.txt')
add_asmparsertest('ARBfp1.0', 'precision_hint-03.txt')
add_asmparsertest('ARBfp1.0', 'precision_hint-04.txt')
add_asmparsertest('ARBfp1.0', 'precision_hint-05.txt')
add_asmparsertest('ARBfp1.0', 'reserved_words-01.txt')
add_asmparsertest('ARBfp1.0', 'result-01.txt')
add_asmparsertest('ARBfp1.0', 'result-02.txt')
add_asmparsertest('ARBfp1.0', 'result-03.txt')
add_asmparsertest('ARBfp1.0', 'result-04.txt')
add_asmparsertest('ARBfp1.0', 'result-05.txt')
add_asmparsertest('ARBfp1.0', 'result-06.txt')
add_asmparsertest('ARBfp1.0', 'result-07.txt')
add_asmparsertest('ARBfp1.0', 'result-08.txt')
add_asmparsertest('ARBfp1.0', 'result-09.txt')
add_asmparsertest('ARBfp1.0', 'result-10.txt')
add_asmparsertest('ARBfp1.0', 'result-11.txt')
add_asmparsertest('ARBfp1.0', 'shadow-01.txt')
add_asmparsertest('ARBfp1.0', 'shadow-02.txt')
add_asmparsertest('ARBfp1.0', 'shadow-03.txt')
add_asmparsertest('ARBfp1.0', 'sincos-01.txt')
add_asmparsertest('ARBfp1.0', 'sincos-02.txt')
add_asmparsertest('ARBfp1.0', 'sincos-03.txt')
add_asmparsertest('ARBfp1.0', 'sincos-04.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-01.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-02.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-03.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-04.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-05.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-06.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-07.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-08.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-09.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-10.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-11.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-12.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-13.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-14.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-15.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-16.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-17.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-18.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-19.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-20.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-21.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-22.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-23.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-24.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-25.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-26.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-27.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-28.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-29.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-30.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-31.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-32.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-33.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-34.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-35.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-36.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-37.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-38.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-39.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-40.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-41.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-42.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-43.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-44.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-45.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-46.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-47.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-48.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-49.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-50.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-51.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-52.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-53.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-54.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-55.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-56.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-57.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-58.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-59.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-60.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-61.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-62.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-63.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-64.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-65.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-66.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-67.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-68.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-69.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-70.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-71.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-72.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-73.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-74.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-75.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-76.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-77.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-78.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-79.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-80.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-81.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-82.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-83.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-84.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-85.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-86.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-87.txt')
add_asmparsertest('ARBfp1.0', 'size_specifier-88.txt')
add_asmparsertest('ARBfp1.0', 'swz-01.txt')
add_asmparsertest('ARBfp1.0', 'swz-02.txt')
add_asmparsertest('ARBfp1.0', 'swz-03.txt')
add_asmparsertest('ARBfp1.0', 'swz-04.txt')
add_asmparsertest('ARBfp1.0', 'swz-05.txt')
add_asmparsertest('ARBfp1.0', 'swz-06.txt')
add_asmparsertest('ARBfp1.0', 'swz-07.txt')
add_asmparsertest('ARBfp1.0', 'txd-01.txt')
add_asmparsertest('ARBfp1.0', 'txd-02.txt')
add_asmparsertest('ARBfp1.0', 'txd-03.txt')

add_asmparsertest('ARBvp1.0', 'abs-02.txt')
add_asmparsertest('ARBvp1.0', 'abs-03.txt')
add_asmparsertest('ARBvp1.0', 'abs.txt')
add_asmparsertest('ARBvp1.0', 'address-01.txt')
add_asmparsertest('ARBvp1.0', 'address-02.txt')
add_asmparsertest('ARBvp1.0', 'address-03.txt')
add_asmparsertest('ARBvp1.0', 'address-04.txt')
add_asmparsertest('ARBvp1.0', 'address-05.txt')
add_asmparsertest('ARBvp1.0', 'address-06.txt')
add_asmparsertest('ARBvp1.0', 'address-07.txt')
add_asmparsertest('ARBvp1.0', 'address-08.txt')
add_asmparsertest('ARBvp1.0', 'address-09.txt')
add_asmparsertest('ARBvp1.0', 'address-10.txt')
add_asmparsertest('ARBvp1.0', 'address-11.txt')
add_asmparsertest('ARBvp1.0', 'add.txt')
add_asmparsertest('ARBvp1.0', 'alias-01.txt')
add_asmparsertest('ARBvp1.0', 'alias-02.txt')
add_asmparsertest('ARBvp1.0', 'all_state-01.txt')
add_asmparsertest('ARBvp1.0', 'all_state-02.txt')
add_asmparsertest('ARBvp1.0', 'all_state-03.txt')
add_asmparsertest('ARBvp1.0', 'all_state-04.txt')
add_asmparsertest('ARBvp1.0', 'all_state-05.txt')
add_asmparsertest('ARBvp1.0', 'all_state-06.txt')
add_asmparsertest('ARBvp1.0', 'all_state-07.txt')
add_asmparsertest('ARBvp1.0', 'all_state-08.txt')
add_asmparsertest('ARBvp1.0', 'all_state-09.txt')
add_asmparsertest('ARBvp1.0', 'all_state-10.txt')
add_asmparsertest('ARBvp1.0', 'all_state-11.txt')
add_asmparsertest('ARBvp1.0', 'all_state-12.txt')
add_asmparsertest('ARBvp1.0', 'all_state-13.txt')
add_asmparsertest('ARBvp1.0', 'all_state-14.txt')
add_asmparsertest('ARBvp1.0', 'all_state-15.txt')
add_asmparsertest('ARBvp1.0', 'all_state-16.txt')
add_asmparsertest('ARBvp1.0', 'all_state-17.txt')
add_asmparsertest('ARBvp1.0', 'all_state-18.txt')
add_asmparsertest('ARBvp1.0', 'ara-01.txt')
add_asmparsertest('ARBvp1.0', 'ara-02.txt')
add_asmparsertest('ARBvp1.0', 'ara-03.txt')
add_asmparsertest('ARBvp1.0', 'ara-04.txt')
add_asmparsertest('ARBvp1.0', 'arbfp.txt')
add_asmparsertest('ARBvp1.0', 'arl-01.txt')
add_asmparsertest('ARBvp1.0', 'arl-02.txt')
add_asmparsertest('ARBvp1.0', 'arl-03.txt')
add_asmparsertest('ARBvp1.0', 'arl-04.txt')
add_asmparsertest('ARBvp1.0', 'arl-05.txt')
add_asmparsertest('ARBvp1.0', 'array_range-01.txt')
add_asmparsertest('ARBvp1.0', 'array_range-02.txt')
add_asmparsertest('ARBvp1.0', 'array_range-03.txt')
add_asmparsertest('ARBvp1.0', 'array_range-04.txt')
add_asmparsertest('ARBvp1.0', 'array_range-05.txt')
add_asmparsertest('ARBvp1.0', 'array_range-06.txt')
add_asmparsertest('ARBvp1.0', 'array_range-07.txt')
add_asmparsertest('ARBvp1.0', 'astack-01.txt')
add_asmparsertest('ARBvp1.0', 'astack-02.txt')
add_asmparsertest('ARBvp1.0', 'astack-03.txt')
add_asmparsertest('ARBvp1.0', 'astack-04.txt')
add_asmparsertest('ARBvp1.0', 'astack-05.txt')
add_asmparsertest('ARBvp1.0', 'astack-06.txt')
add_asmparsertest('ARBvp1.0', 'astack-07.txt')
add_asmparsertest('ARBvp1.0', 'astack-08.txt')
add_asmparsertest('ARBvp1.0', 'astack-09.txt')
add_asmparsertest('ARBvp1.0', 'attrib-01.txt')
add_asmparsertest('ARBvp1.0', 'attrib-02.txt')
add_asmparsertest('ARBvp1.0', 'attrib-03.txt')
add_asmparsertest('ARBvp1.0', 'attrib-04.txt')
add_asmparsertest('ARBvp1.0', 'bra-01.txt')
add_asmparsertest('ARBvp1.0', 'bra-02.txt')
add_asmparsertest('ARBvp1.0', 'bra-03.txt')
add_asmparsertest('ARBvp1.0', 'clipdistance-01.txt')
add_asmparsertest('ARBvp1.0', 'clipdistance-02.txt')
add_asmparsertest('ARBvp1.0', 'clipdistance-03.txt')
add_asmparsertest('ARBvp1.0', 'clipdistance-04.txt')
add_asmparsertest('ARBvp1.0', 'cos-01.txt')
add_asmparsertest('ARBvp1.0', 'cos-02.txt')
add_asmparsertest('ARBvp1.0', 'cos-03.txt')
add_asmparsertest('ARBvp1.0', 'dp3.txt')
add_asmparsertest('ARBvp1.0', 'dp4.txt')
add_asmparsertest('ARBvp1.0', 'dph.txt')
add_asmparsertest('ARBvp1.0', 'dst.txt')
add_asmparsertest('ARBvp1.0', 'ex2.txt')
add_asmparsertest('ARBvp1.0', 'flr.txt')
add_asmparsertest('ARBvp1.0', 'frc.txt')
add_asmparsertest('ARBvp1.0', 'issue-70.txt')
add_asmparsertest('ARBvp1.0', 'issue-74.txt')
add_asmparsertest('ARBvp1.0', 'issue-75.txt')
add_asmparsertest('ARBvp1.0', 'lg2.txt')
add_asmparsertest('ARBvp1.0', 'lit.txt')
add_asmparsertest('ARBvp1.0', 'mad.txt')
add_asmparsertest('ARBvp1.0', 'matrix-01.txt')
add_asmparsertest('ARBvp1.0', 'max.txt')
add_asmparsertest('ARBvp1.0', 'min.txt')
add_asmparsertest('ARBvp1.0', 'mov.txt')
add_asmparsertest('ARBvp1.0', 'mul.txt')
add_asmparsertest('ARBvp1.0', 'numbers-01.txt')
add_asmparsertest('ARBvp1.0', 'numbers-02.txt')
add_asmparsertest('ARBvp1.0', 'numbers-03.txt')
add_asmparsertest('ARBvp1.0', 'numbers-04.txt')
add_asmparsertest('ARBvp1.0', 'numbers-05.txt')
add_asmparsertest('ARBvp1.0', 'numbers-06.txt')
add_asmparsertest('ARBvp1.0', 'numbers-07.txt')
add_asmparsertest('ARBvp1.0', 'option-01.txt')
add_asmparsertest('ARBvp1.0', 'output-01.txt')
add_asmparsertest('ARBvp1.0', 'output-02.txt')
add_asmparsertest('ARBvp1.0', 'param-01.txt')
add_asmparsertest('ARBvp1.0', 'param-02.txt')
add_asmparsertest('ARBvp1.0', 'param-03.txt')
add_asmparsertest('ARBvp1.0', 'param-04.txt')
add_asmparsertest('ARBvp1.0', 'param-05.txt')
add_asmparsertest('ARBvp1.0', 'param-06.txt')
add_asmparsertest('ARBvp1.0', 'param-07.txt')
add_asmparsertest('ARBvp1.0', 'param-08.txt')
add_asmparsertest('ARBvp1.0', 'position_invariant-01.txt')
add_asmparsertest('ARBvp1.0', 'position_invariant-02.txt')
add_asmparsertest('ARBvp1.0', 'pow.txt')
add_asmparsertest('ARBvp1.0', 'rcp-01.txt')
add_asmparsertest('ARBvp1.0', 'rcp-02.txt')
add_asmparsertest('ARBvp1.0', 'rcp-03.txt')
add_asmparsertest('ARBvp1.0', 'rcp-04.txt')
add_asmparsertest('ARBvp1.0', 'rcp-05.txt')
add_asmparsertest('ARBvp1.0', 'rcp-06.txt')
add_asmparsertest('ARBvp1.0', 'rcp-07.txt')
add_asmparsertest('ARBvp1.0', 'reserved_word-01.txt')
add_asmparsertest('ARBvp1.0', 'result-01.txt')
add_asmparsertest('ARBvp1.0', 'result-02.txt')
add_asmparsertest('ARBvp1.0', 'rsq.txt')
add_asmparsertest('ARBvp1.0', 'seq-01.txt')
add_asmparsertest('ARBvp1.0', 'seq-02.txt')
add_asmparsertest('ARBvp1.0', 'sfl-01.txt')
add_asmparsertest('ARBvp1.0', 'sfl-02.txt')
add_asmparsertest('ARBvp1.0', 'sge.txt')
add_asmparsertest('ARBvp1.0', 'sgt-01.txt')
add_asmparsertest('ARBvp1.0', 'sgt-02.txt')
add_asmparsertest('ARBvp1.0', 'sin-01.txt')
add_asmparsertest('ARBvp1.0', 'sin-02.txt')
add_asmparsertest('ARBvp1.0', 'sin-03.txt')
add_asmparsertest('ARBvp1.0', 'sle-01.txt')
add_asmparsertest('ARBvp1.0', 'sle-02.txt')
add_asmparsertest('ARBvp1.0', 'slt.txt')
add_asmparsertest('ARBvp1.0', 'sne-01.txt')
add_asmparsertest('ARBvp1.0', 'sne-02.txt')
add_asmparsertest('ARBvp1.0', 'ssg-01.txt')
add_asmparsertest('ARBvp1.0', 'ssg-02.txt')
add_asmparsertest('ARBvp1.0', 'str-01.txt')
add_asmparsertest('ARBvp1.0', 'str-02.txt')
add_asmparsertest('ARBvp1.0', 'sub.txt')
add_asmparsertest('ARBvp1.0', 'swz-01.txt')
add_asmparsertest('ARBvp1.0', 'swz-02.txt')
add_asmparsertest('ARBvp1.0', 'swz-03.txt')
add_asmparsertest('ARBvp1.0', 'swz-04.txt')
add_asmparsertest('ARBvp1.0', 'swz-05.txt')
add_asmparsertest('ARBvp1.0', 'tex-01.txt')
add_asmparsertest('ARBvp1.0', 'tex-02.txt')
add_asmparsertest('ARBvp1.0', 'tex-03.txt')
add_asmparsertest('ARBvp1.0', 'tex-04.txt')
add_asmparsertest('ARBvp1.0', 'tex-05.txt')
add_asmparsertest('ARBvp1.0', 'tex-06.txt')
add_asmparsertest('ARBvp1.0', 'tex-07.txt')
add_asmparsertest('ARBvp1.0', 'tex-08.txt')
add_asmparsertest('ARBvp1.0', 'tex-09.txt')
add_asmparsertest('ARBvp1.0', 'tex-10.txt')
add_asmparsertest('ARBvp1.0', 'tex-11.txt')
add_asmparsertest('ARBvp1.0', 'tex-12.txt')
add_asmparsertest('ARBvp1.0', 'tex-13.txt')
add_asmparsertest('ARBvp1.0', 'tex-14.txt')
add_asmparsertest('ARBvp1.0', 'tex-15.txt')
add_asmparsertest('ARBvp1.0', 'tex-16.txt')
add_asmparsertest('ARBvp1.0', 'tex-17.txt')
add_asmparsertest('ARBvp1.0', 'tex-18.txt')
add_asmparsertest('ARBvp1.0', 'tex-19.txt')
add_asmparsertest('ARBvp1.0', 'tex-20.txt')
add_asmparsertest('ARBvp1.0', 'txb-01.txt')
add_asmparsertest('ARBvp1.0', 'txb-02.txt')
add_asmparsertest('ARBvp1.0', 'txb-03.txt')
add_asmparsertest('ARBvp1.0', 'txb-04.txt')
add_asmparsertest('ARBvp1.0', 'txb-05.txt')
add_asmparsertest('ARBvp1.0', 'txb-06.txt')
add_asmparsertest('ARBvp1.0', 'txb-07.txt')
add_asmparsertest('ARBvp1.0', 'txb-08.txt')
add_asmparsertest('ARBvp1.0', 'txb-09.txt')
add_asmparsertest('ARBvp1.0', 'txb-10.txt')
add_asmparsertest('ARBvp1.0', 'txb-11.txt')
add_asmparsertest('ARBvp1.0', 'txb-12.txt')
add_asmparsertest('ARBvp1.0', 'txb-13.txt')
add_asmparsertest('ARBvp1.0', 'txb-14.txt')
add_asmparsertest('ARBvp1.0', 'txb-15.txt')
add_asmparsertest('ARBvp1.0', 'txb-16.txt')
add_asmparsertest('ARBvp1.0', 'txb-17.txt')
add_asmparsertest('ARBvp1.0', 'txb-18.txt')
add_asmparsertest('ARBvp1.0', 'txb-19.txt')
add_asmparsertest('ARBvp1.0', 'txb-20.txt')
add_asmparsertest('ARBvp1.0', 'txd-01.txt')
add_asmparsertest('ARBvp1.0', 'txd-02.txt')
add_asmparsertest('ARBvp1.0', 'txd-03.txt')
add_asmparsertest('ARBvp1.0', 'txd-04.txt')
add_asmparsertest('ARBvp1.0', 'txd-05.txt')
add_asmparsertest('ARBvp1.0', 'txd-06.txt')
add_asmparsertest('ARBvp1.0', 'txd-07.txt')
add_asmparsertest('ARBvp1.0', 'txd-08.txt')
add_asmparsertest('ARBvp1.0', 'txd-09.txt')
add_asmparsertest('ARBvp1.0', 'txd-10.txt')
add_asmparsertest('ARBvp1.0', 'txd-11.txt')
add_asmparsertest('ARBvp1.0', 'txd-12.txt')
add_asmparsertest('ARBvp1.0', 'txd-13.txt')
add_asmparsertest('ARBvp1.0', 'txd-14.txt')
add_asmparsertest('ARBvp1.0', 'txd-15.txt')
add_asmparsertest('ARBvp1.0', 'txd-16.txt')
add_asmparsertest('ARBvp1.0', 'txd-17.txt')
add_asmparsertest('ARBvp1.0', 'txd-18.txt')
add_asmparsertest('ARBvp1.0', 'txd-19.txt')
add_asmparsertest('ARBvp1.0', 'txd-20.txt')
add_asmparsertest('ARBvp1.0', 'txf-01.txt')
add_asmparsertest('ARBvp1.0', 'txf-02.txt')
add_asmparsertest('ARBvp1.0', 'txf-03.txt')
add_asmparsertest('ARBvp1.0', 'txf-04.txt')
add_asmparsertest('ARBvp1.0', 'txf-05.txt')
add_asmparsertest('ARBvp1.0', 'txf-06.txt')
add_asmparsertest('ARBvp1.0', 'txf-07.txt')
add_asmparsertest('ARBvp1.0', 'txf-08.txt')
add_asmparsertest('ARBvp1.0', 'txf-09.txt')
add_asmparsertest('ARBvp1.0', 'txf-10.txt')
add_asmparsertest('ARBvp1.0', 'txf-11.txt')
add_asmparsertest('ARBvp1.0', 'txf-12.txt')
add_asmparsertest('ARBvp1.0', 'txf-13.txt')
add_asmparsertest('ARBvp1.0', 'txf-14.txt')
add_asmparsertest('ARBvp1.0', 'txf-15.txt')
add_asmparsertest('ARBvp1.0', 'txf-16.txt')
add_asmparsertest('ARBvp1.0', 'txf-17.txt')
add_asmparsertest('ARBvp1.0', 'txf-18.txt')
add_asmparsertest('ARBvp1.0', 'txf-19.txt')
add_asmparsertest('ARBvp1.0', 'txf-20.txt')
add_asmparsertest('ARBvp1.0', 'txl-01.txt')
add_asmparsertest('ARBvp1.0', 'txl-02.txt')
add_asmparsertest('ARBvp1.0', 'txl-03.txt')
add_asmparsertest('ARBvp1.0', 'txl-04.txt')
add_asmparsertest('ARBvp1.0', 'txl-05.txt')
add_asmparsertest('ARBvp1.0', 'txl-06.txt')
add_asmparsertest('ARBvp1.0', 'txl-07.txt')
add_asmparsertest('ARBvp1.0', 'txl-08.txt')
add_asmparsertest('ARBvp1.0', 'txl-09.txt')
add_asmparsertest('ARBvp1.0', 'txl-10.txt')
add_asmparsertest('ARBvp1.0', 'txl-11.txt')
add_asmparsertest('ARBvp1.0', 'txl-12.txt')
add_asmparsertest('ARBvp1.0', 'txl-13.txt')
add_asmparsertest('ARBvp1.0', 'txl-14.txt')
add_asmparsertest('ARBvp1.0', 'txl-15.txt')
add_asmparsertest('ARBvp1.0', 'txl-16.txt')
add_asmparsertest('ARBvp1.0', 'txl-17.txt')
add_asmparsertest('ARBvp1.0', 'txl-18.txt')
add_asmparsertest('ARBvp1.0', 'txl-19.txt')
add_asmparsertest('ARBvp1.0', 'txl-20.txt')
add_asmparsertest('ARBvp1.0', 'txp-01.txt')
add_asmparsertest('ARBvp1.0', 'txp-02.txt')
add_asmparsertest('ARBvp1.0', 'txp-03.txt')
add_asmparsertest('ARBvp1.0', 'txp-04.txt')
add_asmparsertest('ARBvp1.0', 'txp-05.txt')
add_asmparsertest('ARBvp1.0', 'txp-06.txt')
add_asmparsertest('ARBvp1.0', 'txp-07.txt')
add_asmparsertest('ARBvp1.0', 'txp-08.txt')
add_asmparsertest('ARBvp1.0', 'txp-09.txt')
add_asmparsertest('ARBvp1.0', 'txp-10.txt')
add_asmparsertest('ARBvp1.0', 'txp-11.txt')
add_asmparsertest('ARBvp1.0', 'txp-12.txt')
add_asmparsertest('ARBvp1.0', 'txp-13.txt')
add_asmparsertest('ARBvp1.0', 'txp-14.txt')
add_asmparsertest('ARBvp1.0', 'txp-15.txt')
add_asmparsertest('ARBvp1.0', 'txp-16.txt')
add_asmparsertest('ARBvp1.0', 'txp-17.txt')
add_asmparsertest('ARBvp1.0', 'txp-18.txt')
add_asmparsertest('ARBvp1.0', 'txp-19.txt')
add_asmparsertest('ARBvp1.0', 'txp-20.txt')
add_asmparsertest('ARBvp1.0', 'txq-01.txt')
add_asmparsertest('ARBvp1.0', 'txq-02.txt')
add_asmparsertest('ARBvp1.0', 'txq-03.txt')
add_asmparsertest('ARBvp1.0', 'txq-04.txt')
add_asmparsertest('ARBvp1.0', 'txq-05.txt')
add_asmparsertest('ARBvp1.0', 'txq-06.txt')
add_asmparsertest('ARBvp1.0', 'txq-07.txt')
add_asmparsertest('ARBvp1.0', 'txq-08.txt')
add_asmparsertest('ARBvp1.0', 'txq-09.txt')
add_asmparsertest('ARBvp1.0', 'txq-10.txt')
add_asmparsertest('ARBvp1.0', 'txq-11.txt')
add_asmparsertest('ARBvp1.0', 'txq-12.txt')
add_asmparsertest('ARBvp1.0', 'txq-13.txt')
add_asmparsertest('ARBvp1.0', 'txq-14.txt')
add_asmparsertest('ARBvp1.0', 'txq-15.txt')
add_asmparsertest('ARBvp1.0', 'txq-16.txt')
add_asmparsertest('ARBvp1.0', 'txq-17.txt')
add_asmparsertest('ARBvp1.0', 'txq-18.txt')
add_asmparsertest('ARBvp1.0', 'txq-19.txt')
add_asmparsertest('ARBvp1.0', 'txq-20.txt')
add_asmparsertest('ARBvp1.0', 'xpd.txt')

profile.tests['bugs'] = bugs
profile.tests['general'] = general
profile.tests['hiz'] = hiz
profile.tests['fbo'] = fbo
profile.tests['glean'] = glean
profile.tests['glslparsertest'] = glslparsertest
profile.tests['asmparsertest'] = asmparsertest
profile.tests['mesa'] = mesa
profile.tests['shaders'] = shaders
profile.tests['texturing'] = texturing
profile.tests['spec'] = spec
profile.tests['glx'] = glx

# Remove blacklisted tests
for test_path in blacklist:
    profile.remove_test(test_path)

class ValgrindExecTest(PlainExecTest):
	def __init__(self, test):
		Test.__init__(self, test.runConcurrent)
		self.orig_test = test
		self.env = {}
		if 'PIGLIT_TEST' in test.env:
			self.env['PIGLIT_TEST'] = test.env['PIGLIT_TEST']

	def run(self):
		orig_command = self.orig_test.command
		if orig_command is None:
			assert(self.orig_test.result is not None)
			assert(self.orig_test.result['result'] == 'fail')
			return self.orig_test.result
		self.command = [testsDir + '/valgrind-test/valgrind-test'] + orig_command
		return PlainExecTest.run(self)

valgrind = Group()
for groupname, group in sorted(profile.tests.iteritems()):
	for testname, test in sorted(group.iteritems()):
		if issubclass(test.__class__, PlainExecTest) or issubclass(test.__class__, GleanTest):
			valgrind[groupname+"/"+testname] = ValgrindExecTest(test)

		if issubclass(test.__class__, Group):
			for subtestname, subtest in sorted(test.iteritems()):
				if issubclass(subtest.__class__, PlainExecTest) or issubclass(subtest.__class__, GleanTest):
					valgrind[groupname+"/"+testname+"/"+subtestname] = ValgrindExecTest(subtest)

profile.tests['valgrind'] = valgrind
